<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="822" onload="init(evt)" viewBox="0 0 1200 822" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="822" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="805.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="805.00"> </text><svg id="frames" x="10" width="1180" total_samples="13797"><g><title>&lt;simple_network::activation::functions::sigmoid::Sigmoid as simple_network::activation::functions::FunctionAct&gt;::compute (8 samples, 0.06%)</title><rect x="0.0072%" y="725" width="0.0580%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="8"/><text x="0.2572%" y="735.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::exp (7 samples, 0.05%)</title><rect x="0.0145%" y="709" width="0.0507%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="7"/><text x="0.2645%" y="719.50"></text></g><g><title>&lt;simple_network::activation::functions::sigmoid::Sigmoid as simple_network::activation::functions::FunctionAct&gt;::derivative (10 samples, 0.07%)</title><rect x="0.0652%" y="725" width="0.0725%" height="15" fill="rgb(221,193,54)" fg:x="9" fg:w="10"/><text x="0.3152%" y="735.50"></text></g><g><title>&lt;simple_network::activation::functions::sigmoid::Sigmoid as simple_network::activation::functions::FunctionAct&gt;::compute (5 samples, 0.04%)</title><rect x="0.1015%" y="709" width="0.0362%" height="15" fill="rgb(248,212,6)" fg:x="14" fg:w="5"/><text x="0.3515%" y="719.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::exp (5 samples, 0.04%)</title><rect x="0.1015%" y="693" width="0.0362%" height="15" fill="rgb(208,68,35)" fg:x="14" fg:w="5"/><text x="0.3515%" y="703.50"></text></g><g><title>__GI___exp (12 samples, 0.09%)</title><rect x="0.1450%" y="725" width="0.0870%" height="15" fill="rgb(232,128,0)" fg:x="20" fg:w="12"/><text x="0.3950%" y="735.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (2 samples, 0.01%)</title><rect x="0.2537%" y="725" width="0.0145%" height="15" fill="rgb(207,160,47)" fg:x="35" fg:w="2"/><text x="0.5037%" y="735.50"></text></g><g><title>[[heap]] (39 samples, 0.28%)</title><rect x="0.0072%" y="741" width="0.2827%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="39"/><text x="0.2572%" y="751.50"></text></g><g><title>__GI___exp (10 samples, 0.07%)</title><rect x="0.2899%" y="725" width="0.0725%" height="15" fill="rgb(218,30,26)" fg:x="40" fg:w="10"/><text x="0.5399%" y="735.50"></text></g><g><title>__ieee754_exp_sse2 (8 samples, 0.06%)</title><rect x="0.3624%" y="725" width="0.0580%" height="15" fill="rgb(220,122,19)" fg:x="50" fg:w="8"/><text x="0.6124%" y="735.50"></text></g><g><title>&lt;ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt; as simple_network::algebra::AlgebraExt&gt;::activate::_{{closure}} (4 samples, 0.03%)</title><rect x="0.4349%" y="629" width="0.0290%" height="15" fill="rgb(250,228,42)" fg:x="60" fg:w="4"/><text x="0.6849%" y="639.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (7 samples, 0.05%)</title><rect x="0.4349%" y="725" width="0.0507%" height="15" fill="rgb(240,193,28)" fg:x="60" fg:w="7"/><text x="0.6849%" y="735.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_shape_trusted_iter_unchecked (7 samples, 0.05%)</title><rect x="0.4349%" y="709" width="0.0507%" height="15" fill="rgb(216,20,37)" fg:x="60" fg:w="7"/><text x="0.6849%" y="719.50"></text></g><g><title>ndarray::iterators::to_vec_mapped (7 samples, 0.05%)</title><rect x="0.4349%" y="693" width="0.0507%" height="15" fill="rgb(206,188,39)" fg:x="60" fg:w="7"/><text x="0.6849%" y="703.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.05%)</title><rect x="0.4349%" y="677" width="0.0507%" height="15" fill="rgb(217,207,13)" fg:x="60" fg:w="7"/><text x="0.6849%" y="687.50"></text></g><g><title>ndarray::iterators::to_vec_mapped::_{{closure}} (7 samples, 0.05%)</title><rect x="0.4349%" y="661" width="0.0507%" height="15" fill="rgb(231,73,38)" fg:x="60" fg:w="7"/><text x="0.6849%" y="671.50"></text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv::_{{closure}} (7 samples, 0.05%)</title><rect x="0.4349%" y="645" width="0.0507%" height="15" fill="rgb(225,20,46)" fg:x="60" fg:w="7"/><text x="0.6849%" y="655.50"></text></g><g><title>simple_network::term_cache::TermCache::nonlinear_derivative::_{{closure}} (3 samples, 0.02%)</title><rect x="0.4639%" y="629" width="0.0217%" height="15" fill="rgb(210,31,41)" fg:x="64" fg:w="3"/><text x="0.7139%" y="639.50"></text></g><g><title>[[stack]] (29 samples, 0.21%)</title><rect x="0.2899%" y="741" width="0.2102%" height="15" fill="rgb(221,200,47)" fg:x="40" fg:w="29"/><text x="0.5399%" y="751.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (2 samples, 0.01%)</title><rect x="0.4856%" y="725" width="0.0145%" height="15" fill="rgb(226,26,5)" fg:x="67" fg:w="2"/><text x="0.7356%" y="735.50"></text></g><g><title>[libatlas.so.3.10.3] (3 samples, 0.02%)</title><rect x="0.5001%" y="741" width="0.0217%" height="15" fill="rgb(249,33,26)" fg:x="69" fg:w="3"/><text x="0.7501%" y="751.50"></text></g><g><title>&lt;simple_network::activation::functions::sigmoid::Sigmoid as simple_network::activation::functions::FunctionAct&gt;::compute (7 samples, 0.05%)</title><rect x="1.1452%" y="725" width="0.0507%" height="15" fill="rgb(235,183,28)" fg:x="158" fg:w="7"/><text x="1.3952%" y="735.50"></text></g><g><title>&lt;simple_network::activation::functions::sigmoid::Sigmoid as simple_network::activation::functions::FunctionAct&gt;::derivative (6 samples, 0.04%)</title><rect x="1.1959%" y="725" width="0.0435%" height="15" fill="rgb(221,5,38)" fg:x="165" fg:w="6"/><text x="1.4459%" y="735.50"></text></g><g><title>ATL_dJIK0x0x48NN0x0x0_aX_bX (11 samples, 0.08%)</title><rect x="1.2466%" y="725" width="0.0797%" height="15" fill="rgb(247,18,42)" fg:x="172" fg:w="11"/><text x="1.4966%" y="735.50"></text></g><g><title>ATL_dMBJBmm (3 samples, 0.02%)</title><rect x="1.3264%" y="725" width="0.0217%" height="15" fill="rgb(241,131,45)" fg:x="183" fg:w="3"/><text x="1.5764%" y="735.50"></text></g><g><title>ATL_dgezero (3 samples, 0.02%)</title><rect x="1.3554%" y="725" width="0.0217%" height="15" fill="rgb(249,31,29)" fg:x="187" fg:w="3"/><text x="1.6054%" y="735.50"></text></g><g><title>[libatlas.so.3.10.3] (2 samples, 0.01%)</title><rect x="1.3844%" y="725" width="0.0145%" height="15" fill="rgb(225,111,53)" fg:x="191" fg:w="2"/><text x="1.6344%" y="735.50"></text></g><g><title>_int_malloc (2 samples, 0.01%)</title><rect x="1.4278%" y="725" width="0.0145%" height="15" fill="rgb(238,160,17)" fg:x="197" fg:w="2"/><text x="1.6778%" y="735.50"></text></g><g><title>matrixmultiply::gemm::masked_kernel (2 samples, 0.01%)</title><rect x="1.4423%" y="725" width="0.0145%" height="15" fill="rgb(214,148,48)" fg:x="199" fg:w="2"/><text x="1.6923%" y="735.50"></text></g><g><title>miniz_oxide::inflate::core::transfer (4 samples, 0.03%)</title><rect x="1.4786%" y="725" width="0.0290%" height="15" fill="rgb(232,36,49)" fg:x="204" fg:w="4"/><text x="1.7286%" y="735.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (2 samples, 0.01%)</title><rect x="1.5076%" y="725" width="0.0145%" height="15" fill="rgb(209,103,24)" fg:x="208" fg:w="2"/><text x="1.7576%" y="735.50"></text></g><g><title>ndarray::linalg::impl_linalg::mat_mul_impl (2 samples, 0.01%)</title><rect x="1.5293%" y="725" width="0.0145%" height="15" fill="rgb(229,88,8)" fg:x="211" fg:w="2"/><text x="1.7793%" y="735.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (2 samples, 0.01%)</title><rect x="1.5438%" y="725" width="0.0145%" height="15" fill="rgb(213,181,19)" fg:x="213" fg:w="2"/><text x="1.7938%" y="735.50"></text></g><g><title>simple_network::term_cache::TermCache::cost_derivative (2 samples, 0.01%)</title><rect x="1.5656%" y="725" width="0.0145%" height="15" fill="rgb(254,191,54)" fg:x="216" fg:w="2"/><text x="1.8156%" y="735.50"></text></g><g><title>[unknown] (147 samples, 1.07%)</title><rect x="0.5219%" y="741" width="1.0654%" height="15" fill="rgb(241,83,37)" fg:x="72" fg:w="147"/><text x="0.7719%" y="751.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (117 samples, 0.85%)</title><rect x="2.0657%" y="229" width="0.8480%" height="15" fill="rgb(233,36,39)" fg:x="285" fg:w="117"/><text x="2.3157%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (117 samples, 0.85%)</title><rect x="2.0657%" y="213" width="0.8480%" height="15" fill="rgb(226,3,54)" fg:x="285" fg:w="117"/><text x="2.3157%" y="223.50"></text></g><g><title>core::ptr::write (117 samples, 0.85%)</title><rect x="2.0657%" y="197" width="0.8480%" height="15" fill="rgb(245,192,40)" fg:x="285" fg:w="117"/><text x="2.3157%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (599 samples, 4.34%)</title><rect x="1.6380%" y="389" width="4.3415%" height="15" fill="rgb(238,167,29)" fg:x="226" fg:w="599"/><text x="1.8880%" y="399.50">core:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (599 samples, 4.34%)</title><rect x="1.6380%" y="373" width="4.3415%" height="15" fill="rgb(232,182,51)" fg:x="226" fg:w="599"/><text x="1.8880%" y="383.50">&lt;allo..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (599 samples, 4.34%)</title><rect x="1.6380%" y="357" width="4.3415%" height="15" fill="rgb(231,60,39)" fg:x="226" fg:w="599"/><text x="1.8880%" y="367.50">&lt;allo..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (599 samples, 4.34%)</title><rect x="1.6380%" y="341" width="4.3415%" height="15" fill="rgb(208,69,12)" fg:x="226" fg:w="599"/><text x="1.8880%" y="351.50">&lt;allo..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (599 samples, 4.34%)</title><rect x="1.6380%" y="325" width="4.3415%" height="15" fill="rgb(235,93,37)" fg:x="226" fg:w="599"/><text x="1.8880%" y="335.50">&lt;allo..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (599 samples, 4.34%)</title><rect x="1.6380%" y="309" width="4.3415%" height="15" fill="rgb(213,116,39)" fg:x="226" fg:w="599"/><text x="1.8880%" y="319.50">alloc..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (599 samples, 4.34%)</title><rect x="1.6380%" y="293" width="4.3415%" height="15" fill="rgb(222,207,29)" fg:x="226" fg:w="599"/><text x="1.8880%" y="303.50">core:..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (599 samples, 4.34%)</title><rect x="1.6380%" y="277" width="4.3415%" height="15" fill="rgb(206,96,30)" fg:x="226" fg:w="599"/><text x="1.8880%" y="287.50">&lt;core..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (599 samples, 4.34%)</title><rect x="1.6380%" y="261" width="4.3415%" height="15" fill="rgb(218,138,4)" fg:x="226" fg:w="599"/><text x="1.8880%" y="271.50">&lt;core..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (540 samples, 3.91%)</title><rect x="2.0657%" y="245" width="3.9139%" height="15" fill="rgb(250,191,14)" fg:x="285" fg:w="540"/><text x="2.3157%" y="255.50">core..</text></g><g><title>simple_network::dataset::idx::RawImages::new::_{{closure}} (423 samples, 3.07%)</title><rect x="2.9137%" y="229" width="3.0659%" height="15" fill="rgb(239,60,40)" fg:x="402" fg:w="423"/><text x="3.1637%" y="239.50">sim..</text></g><g><title>simple_network::dataset::idx::Raw::new (642 samples, 4.65%)</title><rect x="1.6380%" y="421" width="4.6532%" height="15" fill="rgb(206,27,48)" fg:x="226" fg:w="642"/><text x="1.8880%" y="431.50">simpl..</text></g><g><title>simple_network::dataset::idx::RawImages::new (642 samples, 4.65%)</title><rect x="1.6380%" y="405" width="4.6532%" height="15" fill="rgb(225,35,8)" fg:x="226" fg:w="642"/><text x="1.8880%" y="415.50">simpl..</text></g><g><title>std::io::Read::read_to_end (43 samples, 0.31%)</title><rect x="5.9796%" y="389" width="0.3117%" height="15" fill="rgb(250,213,24)" fg:x="825" fg:w="43"/><text x="6.2296%" y="399.50"></text></g><g><title>std::io::default_read_to_end (43 samples, 0.31%)</title><rect x="5.9796%" y="373" width="0.3117%" height="15" fill="rgb(247,123,22)" fg:x="825" fg:w="43"/><text x="6.2296%" y="383.50"></text></g><g><title>&lt;std::io::cursor::Cursor&lt;T&gt; as std::io::Read&gt;::read_buf (43 samples, 0.31%)</title><rect x="5.9796%" y="357" width="0.3117%" height="15" fill="rgb(231,138,38)" fg:x="825" fg:w="43"/><text x="6.2296%" y="367.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read_buf (43 samples, 0.31%)</title><rect x="5.9796%" y="341" width="0.3117%" height="15" fill="rgb(231,145,46)" fg:x="825" fg:w="43"/><text x="6.2296%" y="351.50"></text></g><g><title>core::io::borrowed_buf::BorrowedCursor::append (43 samples, 0.31%)</title><rect x="5.9796%" y="325" width="0.3117%" height="15" fill="rgb(251,118,11)" fg:x="825" fg:w="43"/><text x="6.2296%" y="335.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write_slice (43 samples, 0.31%)</title><rect x="5.9796%" y="309" width="0.3117%" height="15" fill="rgb(217,147,25)" fg:x="825" fg:w="43"/><text x="6.2296%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (43 samples, 0.31%)</title><rect x="5.9796%" y="293" width="0.3117%" height="15" fill="rgb(247,81,37)" fg:x="825" fg:w="43"/><text x="6.2296%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (43 samples, 0.31%)</title><rect x="5.9796%" y="277" width="0.3117%" height="15" fill="rgb(209,12,38)" fg:x="825" fg:w="43"/><text x="6.2296%" y="287.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (43 samples, 0.31%)</title><rect x="5.9796%" y="261" width="0.3117%" height="15" fill="rgb(227,1,9)" fg:x="825" fg:w="43"/><text x="6.2296%" y="271.50"></text></g><g><title>miniz_oxide::inflate::core::decode_huffman_code (5 samples, 0.04%)</title><rect x="6.3637%" y="229" width="0.0362%" height="15" fill="rgb(248,47,43)" fg:x="878" fg:w="5"/><text x="6.6137%" y="239.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (11 samples, 0.08%)</title><rect x="7.1175%" y="213" width="0.0797%" height="15" fill="rgb(221,10,30)" fg:x="982" fg:w="11"/><text x="7.3675%" y="223.50"></text></g><g><title>miniz_oxide::inflate::core::HuffmanTable::lookup (43 samples, 0.31%)</title><rect x="7.1972%" y="213" width="0.3117%" height="15" fill="rgb(210,229,1)" fg:x="993" fg:w="43"/><text x="7.4472%" y="223.50"></text></g><g><title>miniz_oxide::inflate::core::HuffmanTable::fast_lookup (33 samples, 0.24%)</title><rect x="7.2697%" y="197" width="0.2392%" height="15" fill="rgb(222,148,37)" fg:x="1003" fg:w="33"/><text x="7.5197%" y="207.50"></text></g><g><title>miniz_oxide::inflate::core::apply_match (20 samples, 0.14%)</title><rect x="7.5089%" y="213" width="0.1450%" height="15" fill="rgb(234,67,33)" fg:x="1036" fg:w="20"/><text x="7.7589%" y="223.50"></text></g><g><title>&lt;&amp;mut T as core::convert::AsRef&lt;U&gt;&gt;::as_ref (2 samples, 0.01%)</title><rect x="7.6828%" y="181" width="0.0145%" height="15" fill="rgb(247,98,35)" fg:x="1060" fg:w="2"/><text x="7.9328%" y="191.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::convert::AsRef&lt;[T]&gt;&gt;::as_ref (2 samples, 0.01%)</title><rect x="7.6828%" y="165" width="0.0145%" height="15" fill="rgb(247,138,52)" fg:x="1060" fg:w="2"/><text x="7.9328%" y="175.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::as_slice (2 samples, 0.01%)</title><rect x="7.6828%" y="149" width="0.0145%" height="15" fill="rgb(213,79,30)" fg:x="1060" fg:w="2"/><text x="7.9328%" y="159.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::make_slice (2 samples, 0.01%)</title><rect x="7.6828%" y="133" width="0.0145%" height="15" fill="rgb(246,177,23)" fg:x="1060" fg:w="2"/><text x="7.9328%" y="143.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::sub_ptr (2 samples, 0.01%)</title><rect x="7.6828%" y="117" width="0.0145%" height="15" fill="rgb(230,62,27)" fg:x="1060" fg:w="2"/><text x="7.9328%" y="127.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (2 samples, 0.01%)</title><rect x="7.6828%" y="101" width="0.0145%" height="15" fill="rgb(216,154,8)" fg:x="1060" fg:w="2"/><text x="7.9328%" y="111.50"></text></g><g><title>miniz_oxide::inflate::core::fill_bit_buffer (11 samples, 0.08%)</title><rect x="7.6538%" y="213" width="0.0797%" height="15" fill="rgb(244,35,45)" fg:x="1056" fg:w="11"/><text x="7.9038%" y="223.50"></text></g><g><title>miniz_oxide::inflate::core::read_u32_le (7 samples, 0.05%)</title><rect x="7.6828%" y="197" width="0.0507%" height="15" fill="rgb(251,115,12)" fg:x="1060" fg:w="7"/><text x="7.9328%" y="207.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (5 samples, 0.04%)</title><rect x="7.6973%" y="181" width="0.0362%" height="15" fill="rgb(240,54,50)" fg:x="1062" fg:w="5"/><text x="7.9473%" y="191.50"></text></g><g><title>core::array::_&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (5 samples, 0.04%)</title><rect x="7.6973%" y="165" width="0.0362%" height="15" fill="rgb(233,84,52)" fg:x="1062" fg:w="5"/><text x="7.9473%" y="175.50"></text></g><g><title>core::result::Result&lt;&amp;T,E&gt;::copied (5 samples, 0.04%)</title><rect x="7.6973%" y="149" width="0.0362%" height="15" fill="rgb(207,117,47)" fg:x="1062" fg:w="5"/><text x="7.9473%" y="159.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (5 samples, 0.04%)</title><rect x="7.6973%" y="133" width="0.0362%" height="15" fill="rgb(249,43,39)" fg:x="1062" fg:w="5"/><text x="7.9473%" y="143.50"></text></g><g><title>miniz_oxide::inflate::core::transfer (47 samples, 0.34%)</title><rect x="7.7336%" y="213" width="0.3407%" height="15" fill="rgb(209,38,44)" fg:x="1067" fg:w="47"/><text x="7.9836%" y="223.50"></text></g><g><title>miniz_oxide::inflate::output_buffer::OutputBuffer::bytes_left (2 samples, 0.01%)</title><rect x="8.0742%" y="213" width="0.0145%" height="15" fill="rgb(236,212,23)" fg:x="1114" fg:w="2"/><text x="8.3242%" y="223.50"></text></g><g><title>miniz_oxide::inflate::core::decompress_fast (241 samples, 1.75%)</title><rect x="6.3999%" y="229" width="1.7468%" height="15" fill="rgb(242,79,21)" fg:x="883" fg:w="241"/><text x="6.6499%" y="239.50"></text></g><g><title>miniz_oxide::inflate::output_buffer::OutputBuffer::write_byte (8 samples, 0.06%)</title><rect x="8.0887%" y="213" width="0.0580%" height="15" fill="rgb(211,96,35)" fg:x="1116" fg:w="8"/><text x="8.3387%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="8.2844%" y="213" width="0.0145%" height="15" fill="rgb(253,215,40)" fg:x="1143" fg:w="2"/><text x="8.5344%" y="223.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="8.2844%" y="197" width="0.0145%" height="15" fill="rgb(211,81,21)" fg:x="1143" fg:w="2"/><text x="8.5344%" y="207.50"></text></g><g><title>miniz_oxide::inflate::core::decompress (279 samples, 2.02%)</title><rect x="6.2912%" y="245" width="2.0222%" height="15" fill="rgb(208,190,38)" fg:x="868" fg:w="279"/><text x="6.5412%" y="255.50">m..</text></g><g><title>miniz_oxide::inflate::core::init_tree (23 samples, 0.17%)</title><rect x="8.1467%" y="229" width="0.1667%" height="15" fill="rgb(235,213,38)" fg:x="1124" fg:w="23"/><text x="8.3967%" y="239.50"></text></g><g><title>miniz_oxide::inflate::core::memset (2 samples, 0.01%)</title><rect x="8.2989%" y="213" width="0.0145%" height="15" fill="rgb(237,122,38)" fg:x="1145" fg:w="2"/><text x="8.5489%" y="223.50"></text></g><g><title>__memset_sse2_unaligned_erms (2 samples, 0.01%)</title><rect x="8.2989%" y="197" width="0.0145%" height="15" fill="rgb(244,218,35)" fg:x="1145" fg:w="2"/><text x="8.5489%" y="207.50"></text></g><g><title>miniz_oxide::inflate::stream::inflate_loop (287 samples, 2.08%)</title><rect x="6.2912%" y="261" width="2.0802%" height="15" fill="rgb(240,68,47)" fg:x="868" fg:w="287"/><text x="6.5412%" y="271.50">m..</text></g><g><title>miniz_oxide::inflate::stream::push_dict_out (8 samples, 0.06%)</title><rect x="8.3134%" y="245" width="0.0580%" height="15" fill="rgb(210,16,53)" fg:x="1147" fg:w="8"/><text x="8.5634%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (8 samples, 0.06%)</title><rect x="8.3134%" y="229" width="0.0580%" height="15" fill="rgb(235,124,12)" fg:x="1147" fg:w="8"/><text x="8.5634%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 0.06%)</title><rect x="8.3134%" y="213" width="0.0580%" height="15" fill="rgb(224,169,11)" fg:x="1147" fg:w="8"/><text x="8.5634%" y="223.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (8 samples, 0.06%)</title><rect x="8.3134%" y="197" width="0.0580%" height="15" fill="rgb(250,166,2)" fg:x="1147" fg:w="8"/><text x="8.5634%" y="207.50"></text></g><g><title>&lt;flate2::ffi::rust::Inflate as flate2::ffi::InflateBackend&gt;::decompress (288 samples, 2.09%)</title><rect x="6.2912%" y="293" width="2.0874%" height="15" fill="rgb(242,216,29)" fg:x="868" fg:w="288"/><text x="6.5412%" y="303.50">&lt;..</text></g><g><title>miniz_oxide::inflate::stream::inflate (288 samples, 2.09%)</title><rect x="6.2912%" y="277" width="2.0874%" height="15" fill="rgb(230,116,27)" fg:x="868" fg:w="288"/><text x="6.5412%" y="287.50">m..</text></g><g><title>crc32fast::specialized::pclmulqdq::get (4 samples, 0.03%)</title><rect x="8.3786%" y="245" width="0.0290%" height="15" fill="rgb(228,99,48)" fg:x="1156" fg:w="4"/><text x="8.6286%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (4 samples, 0.03%)</title><rect x="8.3786%" y="229" width="0.0290%" height="15" fill="rgb(253,11,6)" fg:x="1156" fg:w="4"/><text x="8.6286%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.03%)</title><rect x="8.3786%" y="213" width="0.0290%" height="15" fill="rgb(247,143,39)" fg:x="1156" fg:w="4"/><text x="8.6286%" y="223.50"></text></g><g><title>core::core_arch::x86::pclmulqdq::_mm_clmulepi64_si128 (9 samples, 0.07%)</title><rect x="8.4076%" y="229" width="0.0652%" height="15" fill="rgb(236,97,10)" fg:x="1160" fg:w="9"/><text x="8.6576%" y="239.50"></text></g><g><title>std::io::Read::read_buf (302 samples, 2.19%)</title><rect x="6.2912%" y="389" width="2.1889%" height="15" fill="rgb(233,208,19)" fg:x="868" fg:w="302"/><text x="6.5412%" y="399.50">s..</text></g><g><title>std::io::default_read_buf (302 samples, 2.19%)</title><rect x="6.2912%" y="373" width="2.1889%" height="15" fill="rgb(216,164,2)" fg:x="868" fg:w="302"/><text x="6.5412%" y="383.50">s..</text></g><g><title>std::io::Read::read_buf::_{{closure}} (302 samples, 2.19%)</title><rect x="6.2912%" y="357" width="2.1889%" height="15" fill="rgb(220,129,5)" fg:x="868" fg:w="302"/><text x="6.5412%" y="367.50">s..</text></g><g><title>&lt;flate2::gz::read::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (302 samples, 2.19%)</title><rect x="6.2912%" y="341" width="2.1889%" height="15" fill="rgb(242,17,10)" fg:x="868" fg:w="302"/><text x="6.5412%" y="351.50">&lt;..</text></g><g><title>&lt;flate2::gz::bufread::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (302 samples, 2.19%)</title><rect x="6.2912%" y="325" width="2.1889%" height="15" fill="rgb(242,107,0)" fg:x="868" fg:w="302"/><text x="6.5412%" y="335.50">&lt;..</text></g><g><title>&lt;flate2::crc::CrcReader&lt;R&gt; as std::io::Read&gt;::read (302 samples, 2.19%)</title><rect x="6.2912%" y="309" width="2.1889%" height="15" fill="rgb(251,28,31)" fg:x="868" fg:w="302"/><text x="6.5412%" y="319.50">&lt;..</text></g><g><title>crc32fast::Hasher::update (14 samples, 0.10%)</title><rect x="8.3786%" y="293" width="0.1015%" height="15" fill="rgb(233,223,10)" fg:x="1156" fg:w="14"/><text x="8.6286%" y="303.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::State::update (14 samples, 0.10%)</title><rect x="8.3786%" y="277" width="0.1015%" height="15" fill="rgb(215,21,27)" fg:x="1156" fg:w="14"/><text x="8.6286%" y="287.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (14 samples, 0.10%)</title><rect x="8.3786%" y="261" width="0.1015%" height="15" fill="rgb(232,23,21)" fg:x="1156" fg:w="14"/><text x="8.6286%" y="271.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::reduce128 (10 samples, 0.07%)</title><rect x="8.4076%" y="245" width="0.0725%" height="15" fill="rgb(244,5,23)" fg:x="1160" fg:w="10"/><text x="8.6576%" y="255.50"></text></g><g><title>&lt;simple_network::dataset::idx::MnistData as simple_network::dataset::DataSet&gt;::train_test_split (946 samples, 6.86%)</title><rect x="1.6380%" y="469" width="6.8566%" height="15" fill="rgb(226,81,46)" fg:x="226" fg:w="946"/><text x="1.8880%" y="479.50">&lt;simple_n..</text></g><g><title>&lt;simple_network::dataset::idx::MnistData as simple_network::dataset::DataSet&gt;::fetch (946 samples, 6.86%)</title><rect x="1.6380%" y="453" width="6.8566%" height="15" fill="rgb(247,70,30)" fg:x="226" fg:w="946"/><text x="1.8880%" y="463.50">&lt;simple_n..</text></g><g><title>simple_network::dataset::idx::Subset::fetch (946 samples, 6.86%)</title><rect x="1.6380%" y="437" width="6.8566%" height="15" fill="rgb(212,68,19)" fg:x="226" fg:w="946"/><text x="1.8880%" y="447.50">simple_ne..</text></g><g><title>std::io::Read::read_to_end (304 samples, 2.20%)</title><rect x="6.2912%" y="421" width="2.2034%" height="15" fill="rgb(240,187,13)" fg:x="868" fg:w="304"/><text x="6.5412%" y="431.50">s..</text></g><g><title>std::io::default_read_to_end (304 samples, 2.20%)</title><rect x="6.2912%" y="405" width="2.2034%" height="15" fill="rgb(223,113,26)" fg:x="868" fg:w="304"/><text x="6.5412%" y="415.50">s..</text></g><g><title>std::io::default_read_to_end::small_probe_read (2 samples, 0.01%)</title><rect x="8.4801%" y="389" width="0.0145%" height="15" fill="rgb(206,192,2)" fg:x="1170" fg:w="2"/><text x="8.7301%" y="399.50"></text></g><g><title>&lt;flate2::gz::bufread::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (2 samples, 0.01%)</title><rect x="8.4801%" y="373" width="0.0145%" height="15" fill="rgb(241,108,4)" fg:x="1170" fg:w="2"/><text x="8.7301%" y="383.50"></text></g><g><title>&lt;flate2::crc::CrcReader&lt;R&gt; as std::io::Read&gt;::read (2 samples, 0.01%)</title><rect x="8.4801%" y="357" width="0.0145%" height="15" fill="rgb(247,173,49)" fg:x="1170" fg:w="2"/><text x="8.7301%" y="367.50"></text></g><g><title>&lt;flate2::ffi::rust::Inflate as flate2::ffi::InflateBackend&gt;::decompress (2 samples, 0.01%)</title><rect x="8.4801%" y="341" width="0.0145%" height="15" fill="rgb(224,114,35)" fg:x="1170" fg:w="2"/><text x="8.7301%" y="351.50"></text></g><g><title>miniz_oxide::inflate::stream::inflate (2 samples, 0.01%)</title><rect x="8.4801%" y="325" width="0.0145%" height="15" fill="rgb(245,159,27)" fg:x="1170" fg:w="2"/><text x="8.7301%" y="335.50"></text></g><g><title>miniz_oxide::inflate::stream::inflate_loop (2 samples, 0.01%)</title><rect x="8.4801%" y="309" width="0.0145%" height="15" fill="rgb(245,172,44)" fg:x="1170" fg:w="2"/><text x="8.7301%" y="319.50"></text></g><g><title>miniz_oxide::inflate::core::decompress (2 samples, 0.01%)</title><rect x="8.4801%" y="293" width="0.0145%" height="15" fill="rgb(236,23,11)" fg:x="1170" fg:w="2"/><text x="8.7301%" y="303.50"></text></g><g><title>simple_network::network::Network::compile (2 samples, 0.01%)</title><rect x="8.4946%" y="469" width="0.0145%" height="15" fill="rgb(205,117,38)" fg:x="1172" fg:w="2"/><text x="8.7446%" y="479.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::swap (3 samples, 0.02%)</title><rect x="8.5091%" y="421" width="0.0217%" height="15" fill="rgb(237,72,25)" fg:x="1174" fg:w="3"/><text x="8.7591%" y="431.50"></text></g><g><title>core::ptr::swap (3 samples, 0.02%)</title><rect x="8.5091%" y="405" width="0.0217%" height="15" fill="rgb(244,70,9)" fg:x="1174" fg:w="3"/><text x="8.7591%" y="415.50"></text></g><g><title>core::intrinsics::copy (3 samples, 0.02%)</title><rect x="8.5091%" y="389" width="0.0217%" height="15" fill="rgb(217,125,39)" fg:x="1174" fg:w="3"/><text x="8.7591%" y="399.50"></text></g><g><title>core::num::&lt;impl u32&gt;::leading_zeros (2 samples, 0.01%)</title><rect x="8.5308%" y="341" width="0.0145%" height="15" fill="rgb(235,36,10)" fg:x="1177" fg:w="2"/><text x="8.7808%" y="351.50"></text></g><g><title>&lt;[T] as rand::seq::SliceRandom&gt;::shuffle (11 samples, 0.08%)</title><rect x="8.5091%" y="437" width="0.0797%" height="15" fill="rgb(251,123,47)" fg:x="1174" fg:w="11"/><text x="8.7591%" y="447.50"></text></g><g><title>rand::seq::gen_index (8 samples, 0.06%)</title><rect x="8.5308%" y="421" width="0.0580%" height="15" fill="rgb(221,13,13)" fg:x="1177" fg:w="8"/><text x="8.7808%" y="431.50"></text></g><g><title>rand::rng::Rng::gen_range (8 samples, 0.06%)</title><rect x="8.5308%" y="405" width="0.0580%" height="15" fill="rgb(238,131,9)" fg:x="1177" fg:w="8"/><text x="8.7808%" y="415.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as rand::distributions::uniform::SampleRange&lt;T&gt;&gt;::sample_single (8 samples, 0.06%)</title><rect x="8.5308%" y="389" width="0.0580%" height="15" fill="rgb(211,50,8)" fg:x="1177" fg:w="8"/><text x="8.7808%" y="399.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;u32&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single (8 samples, 0.06%)</title><rect x="8.5308%" y="373" width="0.0580%" height="15" fill="rgb(245,182,24)" fg:x="1177" fg:w="8"/><text x="8.7808%" y="383.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;u32&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single_inclusive (8 samples, 0.06%)</title><rect x="8.5308%" y="357" width="0.0580%" height="15" fill="rgb(242,14,37)" fg:x="1177" fg:w="8"/><text x="8.7808%" y="367.50"></text></g><g><title>rand::rng::Rng::gen (6 samples, 0.04%)</title><rect x="8.5453%" y="341" width="0.0435%" height="15" fill="rgb(246,228,12)" fg:x="1179" fg:w="6"/><text x="8.7953%" y="351.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;u32&gt; for rand::distributions::Standard&gt;::sample (6 samples, 0.04%)</title><rect x="8.5453%" y="325" width="0.0435%" height="15" fill="rgb(213,55,15)" fg:x="1179" fg:w="6"/><text x="8.7953%" y="335.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u32 (6 samples, 0.04%)</title><rect x="8.5453%" y="309" width="0.0435%" height="15" fill="rgb(209,9,3)" fg:x="1179" fg:w="6"/><text x="8.7953%" y="319.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u32 (6 samples, 0.04%)</title><rect x="8.5453%" y="293" width="0.0435%" height="15" fill="rgb(230,59,30)" fg:x="1179" fg:w="6"/><text x="8.7953%" y="303.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u32 (6 samples, 0.04%)</title><rect x="8.5453%" y="277" width="0.0435%" height="15" fill="rgb(209,121,21)" fg:x="1179" fg:w="6"/><text x="8.7953%" y="287.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (3 samples, 0.02%)</title><rect x="8.5671%" y="261" width="0.0217%" height="15" fill="rgb(220,109,13)" fg:x="1182" fg:w="3"/><text x="8.8171%" y="271.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (3 samples, 0.02%)</title><rect x="8.5671%" y="245" width="0.0217%" height="15" fill="rgb(232,18,1)" fg:x="1182" fg:w="3"/><text x="8.8171%" y="255.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (3 samples, 0.02%)</title><rect x="8.5671%" y="229" width="0.0217%" height="15" fill="rgb(215,41,42)" fg:x="1182" fg:w="3"/><text x="8.8171%" y="239.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (3 samples, 0.02%)</title><rect x="8.5671%" y="213" width="0.0217%" height="15" fill="rgb(224,123,36)" fg:x="1182" fg:w="3"/><text x="8.8171%" y="223.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_sse41 (3 samples, 0.02%)</title><rect x="8.5671%" y="197" width="0.0217%" height="15" fill="rgb(240,125,3)" fg:x="1182" fg:w="3"/><text x="8.8171%" y="207.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (3 samples, 0.02%)</title><rect x="8.5671%" y="181" width="0.0217%" height="15" fill="rgb(205,98,50)" fg:x="1182" fg:w="3"/><text x="8.8171%" y="191.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (3 samples, 0.02%)</title><rect x="8.5671%" y="165" width="0.0217%" height="15" fill="rgb(205,185,37)" fg:x="1182" fg:w="3"/><text x="8.8171%" y="175.50"></text></g><g><title>rand_chacha::guts::round (3 samples, 0.02%)</title><rect x="8.5671%" y="149" width="0.0217%" height="15" fill="rgb(238,207,15)" fg:x="1182" fg:w="3"/><text x="8.8171%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt; (4 samples, 0.03%)</title><rect x="8.5888%" y="437" width="0.0290%" height="15" fill="rgb(213,199,42)" fg:x="1185" fg:w="4"/><text x="8.8388%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;&gt; (4 samples, 0.03%)</title><rect x="8.5888%" y="421" width="0.0290%" height="15" fill="rgb(235,201,11)" fg:x="1185" fg:w="4"/><text x="8.8388%" y="431.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.03%)</title><rect x="8.5888%" y="405" width="0.0290%" height="15" fill="rgb(207,46,11)" fg:x="1185" fg:w="4"/><text x="8.8388%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f64&gt;&gt; (3 samples, 0.02%)</title><rect x="8.5961%" y="389" width="0.0217%" height="15" fill="rgb(241,35,35)" fg:x="1186" fg:w="3"/><text x="8.8461%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f64&gt;&gt; (3 samples, 0.02%)</title><rect x="8.5961%" y="373" width="0.0217%" height="15" fill="rgb(243,32,47)" fg:x="1186" fg:w="3"/><text x="8.8461%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="8.5961%" y="357" width="0.0217%" height="15" fill="rgb(247,202,23)" fg:x="1186" fg:w="3"/><text x="8.8461%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.02%)</title><rect x="8.5961%" y="341" width="0.0217%" height="15" fill="rgb(219,102,11)" fg:x="1186" fg:w="3"/><text x="8.8461%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.02%)</title><rect x="8.5961%" y="325" width="0.0217%" height="15" fill="rgb(243,110,44)" fg:x="1186" fg:w="3"/><text x="8.8461%" y="335.50"></text></g><g><title>__GI___libc_free (3 samples, 0.02%)</title><rect x="8.5961%" y="309" width="0.0217%" height="15" fill="rgb(222,74,54)" fg:x="1186" fg:w="3"/><text x="8.8461%" y="319.50"></text></g><g><title>_int_free_merge_chunk (2 samples, 0.01%)</title><rect x="8.6033%" y="293" width="0.0145%" height="15" fill="rgb(216,99,12)" fg:x="1187" fg:w="2"/><text x="8.8533%" y="303.50"></text></g><g><title>unlink_chunk (2 samples, 0.01%)</title><rect x="8.6033%" y="277" width="0.0145%" height="15" fill="rgb(226,22,26)" fg:x="1187" fg:w="2"/><text x="8.8533%" y="287.50"></text></g><g><title>alloc::vec::from_elem (2 samples, 0.01%)</title><rect x="8.6396%" y="421" width="0.0145%" height="15" fill="rgb(217,163,10)" fg:x="1192" fg:w="2"/><text x="8.8896%" y="431.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (2 samples, 0.01%)</title><rect x="8.6396%" y="405" width="0.0145%" height="15" fill="rgb(213,25,53)" fg:x="1192" fg:w="2"/><text x="8.8896%" y="415.50"></text></g><g><title>ndarray::impl_clone::&lt;impl core::clone::Clone for ndarray::ArrayBase&lt;S,D&gt;&gt;::clone (3 samples, 0.02%)</title><rect x="8.6686%" y="405" width="0.0217%" height="15" fill="rgb(252,105,26)" fg:x="1196" fg:w="3"/><text x="8.9186%" y="415.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_shape_vec_unchecked (2 samples, 0.01%)</title><rect x="8.6903%" y="405" width="0.0145%" height="15" fill="rgb(220,39,43)" fg:x="1199" fg:w="2"/><text x="8.9403%" y="415.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_vec_dim_stride_unchecked (2 samples, 0.01%)</title><rect x="8.6903%" y="389" width="0.0145%" height="15" fill="rgb(229,68,48)" fg:x="1199" fg:w="2"/><text x="8.9403%" y="399.50"></text></g><g><title>ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr (2 samples, 0.01%)</title><rect x="8.6903%" y="373" width="0.0145%" height="15" fill="rgb(252,8,32)" fg:x="1199" fg:w="2"/><text x="8.9403%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.01%)</title><rect x="8.6903%" y="357" width="0.0145%" height="15" fill="rgb(223,20,43)" fg:x="1199" fg:w="2"/><text x="8.9403%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::fold (2 samples, 0.01%)</title><rect x="8.6903%" y="341" width="0.0145%" height="15" fill="rgb(229,81,49)" fg:x="1199" fg:w="2"/><text x="8.9403%" y="351.50"></text></g><g><title>&lt;ndarray::dimension::dim::Dim&lt;[usize: 2]&gt; as ndarray::dimension::remove_axis::RemoveAxis&gt;::remove_axis (2 samples, 0.01%)</title><rect x="8.7918%" y="389" width="0.0145%" height="15" fill="rgb(236,28,36)" fg:x="1213" fg:w="2"/><text x="9.0418%" y="399.50"></text></g><g><title>ndarray::aliases::Ix1 (2 samples, 0.01%)</title><rect x="8.7918%" y="373" width="0.0145%" height="15" fill="rgb(249,185,26)" fg:x="1213" fg:w="2"/><text x="9.0418%" y="383.50"></text></g><g><title>ndarray::dimension::dim::Dim&lt;I&gt;::new (2 samples, 0.01%)</title><rect x="8.7918%" y="357" width="0.0145%" height="15" fill="rgb(249,174,33)" fg:x="1213" fg:w="2"/><text x="9.0418%" y="367.50"></text></g><g><title>ndarray::data_repr::OwnedRepr&lt;A&gt;::len (3 samples, 0.02%)</title><rect x="8.8135%" y="389" width="0.0217%" height="15" fill="rgb(233,201,37)" fg:x="1216" fg:w="3"/><text x="9.0635%" y="399.50"></text></g><g><title>ndarray::dimension::size_of_shape_checked (3 samples, 0.02%)</title><rect x="8.8353%" y="389" width="0.0217%" height="15" fill="rgb(221,78,26)" fg:x="1219" fg:w="3"/><text x="9.0853%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.02%)</title><rect x="8.8353%" y="373" width="0.0217%" height="15" fill="rgb(250,127,30)" fg:x="1219" fg:w="3"/><text x="9.0853%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (3 samples, 0.02%)</title><rect x="8.8353%" y="357" width="0.0217%" height="15" fill="rgb(230,49,44)" fg:x="1219" fg:w="3"/><text x="9.0853%" y="367.50"></text></g><g><title>core::iter::adapters::filter::filter_try_fold::_{{closure}} (3 samples, 0.02%)</title><rect x="8.8353%" y="341" width="0.0217%" height="15" fill="rgb(229,67,23)" fg:x="1219" fg:w="3"/><text x="9.0853%" y="351.50"></text></g><g><title>ndarray::dimension::size_of_shape_checked::_{{closure}} (3 samples, 0.02%)</title><rect x="8.8353%" y="325" width="0.0217%" height="15" fill="rgb(249,83,47)" fg:x="1219" fg:w="3"/><text x="9.0853%" y="335.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::len (3 samples, 0.02%)</title><rect x="8.8570%" y="389" width="0.0217%" height="15" fill="rgb(215,43,3)" fg:x="1222" fg:w="3"/><text x="9.1070%" y="399.50"></text></g><g><title>&lt;ndarray::dimension::dim::Dim&lt;[usize: 2]&gt; as ndarray::dimension::dimension_trait::Dimension&gt;::size (3 samples, 0.02%)</title><rect x="8.8570%" y="373" width="0.0217%" height="15" fill="rgb(238,154,13)" fg:x="1222" fg:w="3"/><text x="9.1070%" y="383.50"></text></g><g><title>&lt;ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;*mut A&gt;,D&gt; as ndarray::zip::ndproducer::NdProducer&gt;::layout (2 samples, 0.01%)</title><rect x="8.8932%" y="373" width="0.0145%" height="15" fill="rgb(219,56,2)" fg:x="1227" fg:w="2"/><text x="9.1432%" y="383.50"></text></g><g><title>ndarray::zip::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::layout_impl (2 samples, 0.01%)</title><rect x="8.8932%" y="357" width="0.0145%" height="15" fill="rgb(233,0,4)" fg:x="1227" fg:w="2"/><text x="9.1432%" y="367.50"></text></g><g><title>ndarray::zip::array_layout (2 samples, 0.01%)</title><rect x="8.8932%" y="341" width="0.0145%" height="15" fill="rgb(235,30,7)" fg:x="1227" fg:w="2"/><text x="9.1432%" y="351.50"></text></g><g><title>ndarray::zip::Zip&lt;(P,),D&gt;::from (4 samples, 0.03%)</title><rect x="8.8932%" y="389" width="0.0290%" height="15" fill="rgb(250,79,13)" fg:x="1227" fg:w="4"/><text x="9.1432%" y="399.50"></text></g><g><title>ndarray::layout::Layout::tendency (2 samples, 0.01%)</title><rect x="8.9077%" y="373" width="0.0145%" height="15" fill="rgb(211,146,34)" fg:x="1229" fg:w="2"/><text x="9.1577%" y="383.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,),D&gt;::and_unchecked (5 samples, 0.04%)</title><rect x="8.9222%" y="389" width="0.0362%" height="15" fill="rgb(228,22,38)" fg:x="1231" fg:w="5"/><text x="9.1722%" y="399.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,),D&gt;::build_and (5 samples, 0.04%)</title><rect x="8.9222%" y="373" width="0.0362%" height="15" fill="rgb(235,168,5)" fg:x="1231" fg:w="5"/><text x="9.1722%" y="383.50"></text></g><g><title>ndarray::layout::Layout::tendency (4 samples, 0.03%)</title><rect x="8.9295%" y="357" width="0.0290%" height="15" fill="rgb(221,155,16)" fg:x="1232" fg:w="4"/><text x="9.1795%" y="367.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::select (630 samples, 4.57%)</title><rect x="8.6178%" y="437" width="4.5662%" height="15" fill="rgb(215,215,53)" fg:x="1189" fg:w="630"/><text x="8.8678%" y="447.50">ndarr..</text></g><g><title>ndarray::stacking::concatenate (624 samples, 4.52%)</title><rect x="8.6613%" y="421" width="4.5227%" height="15" fill="rgb(223,4,10)" fg:x="1195" fg:w="624"/><text x="8.9113%" y="431.50">ndarr..</text></g><g><title>ndarray::impl_owned_array::&lt;impl ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;A&gt;,D&gt;&gt;::append (618 samples, 4.48%)</title><rect x="8.7048%" y="405" width="4.4792%" height="15" fill="rgb(234,103,6)" fg:x="1201" fg:w="618"/><text x="8.9548%" y="415.50">ndarr..</text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (583 samples, 4.23%)</title><rect x="8.9585%" y="389" width="4.2256%" height="15" fill="rgb(227,97,0)" fg:x="1236" fg:w="583"/><text x="9.2085%" y="399.50">ndarr..</text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core (583 samples, 4.23%)</title><rect x="8.9585%" y="373" width="4.2256%" height="15" fill="rgb(234,150,53)" fg:x="1236" fg:w="583"/><text x="9.2085%" y="383.50">ndarr..</text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_contiguous (583 samples, 4.23%)</title><rect x="8.9585%" y="357" width="4.2256%" height="15" fill="rgb(228,201,54)" fg:x="1236" fg:w="583"/><text x="9.2085%" y="367.50">ndarr..</text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::inner (583 samples, 4.23%)</title><rect x="8.9585%" y="341" width="4.2256%" height="15" fill="rgb(222,22,37)" fg:x="1236" fg:w="583"/><text x="9.2085%" y="351.50">ndarr..</text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::_{{closure}} (25 samples, 0.18%)</title><rect x="13.0028%" y="325" width="0.1812%" height="15" fill="rgb(237,53,32)" fg:x="1794" fg:w="25"/><text x="13.2528%" y="335.50"></text></g><g><title>ndarray::impl_owned_array::_&lt;impl ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;A&gt;,D&gt;&gt;::append::_{{closure}} (25 samples, 0.18%)</title><rect x="13.0028%" y="309" width="0.1812%" height="15" fill="rgb(233,25,53)" fg:x="1794" fg:w="25"/><text x="13.2528%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (25 samples, 0.18%)</title><rect x="13.0028%" y="293" width="0.1812%" height="15" fill="rgb(210,40,34)" fg:x="1794" fg:w="25"/><text x="13.2528%" y="303.50"></text></g><g><title>core::ptr::write (25 samples, 0.18%)</title><rect x="13.0028%" y="277" width="0.1812%" height="15" fill="rgb(241,220,44)" fg:x="1794" fg:w="25"/><text x="13.2528%" y="287.50"></text></g><g><title>&lt;ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt; as simple_network::algebra::AlgebraExt&gt;::arg_max (4 samples, 0.03%)</title><rect x="13.1913%" y="421" width="0.0290%" height="15" fill="rgb(235,28,35)" fg:x="1820" fg:w="4"/><text x="13.4413%" y="431.50"></text></g><g><title>__ieee754_log_sse2 (12 samples, 0.09%)</title><rect x="13.2348%" y="181" width="0.0870%" height="15" fill="rgb(210,56,17)" fg:x="1826" fg:w="12"/><text x="13.4848%" y="191.50"></text></g><g><title>__log (3 samples, 0.02%)</title><rect x="13.3217%" y="181" width="0.0217%" height="15" fill="rgb(224,130,29)" fg:x="1838" fg:w="3"/><text x="13.5717%" y="191.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (18 samples, 0.13%)</title><rect x="13.2203%" y="309" width="0.1305%" height="15" fill="rgb(235,212,8)" fg:x="1824" fg:w="18"/><text x="13.4703%" y="319.50"></text></g><g><title>ndarray::iterators::to_vec_mapped::_{{closure}} (17 samples, 0.12%)</title><rect x="13.2275%" y="293" width="0.1232%" height="15" fill="rgb(223,33,50)" fg:x="1825" fg:w="17"/><text x="13.4775%" y="303.50"></text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv::_{{closure}} (17 samples, 0.12%)</title><rect x="13.2275%" y="277" width="0.1232%" height="15" fill="rgb(219,149,13)" fg:x="1825" fg:w="17"/><text x="13.4775%" y="287.50"></text></g><g><title>&lt;ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt; as simple_network::algebra::AlgebraExt&gt;::ln::_{{closure}} (17 samples, 0.12%)</title><rect x="13.2275%" y="261" width="0.1232%" height="15" fill="rgb(250,156,29)" fg:x="1825" fg:w="17"/><text x="13.4775%" y="271.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::log (17 samples, 0.12%)</title><rect x="13.2275%" y="245" width="0.1232%" height="15" fill="rgb(216,193,19)" fg:x="1825" fg:w="17"/><text x="13.4775%" y="255.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::ln (17 samples, 0.12%)</title><rect x="13.2275%" y="229" width="0.1232%" height="15" fill="rgb(216,135,14)" fg:x="1825" fg:w="17"/><text x="13.4775%" y="239.50"></text></g><g><title>std::sys::pal::log_wrapper (17 samples, 0.12%)</title><rect x="13.2275%" y="213" width="0.1232%" height="15" fill="rgb(241,47,5)" fg:x="1825" fg:w="17"/><text x="13.4775%" y="223.50"></text></g><g><title>std::f64::_&lt;impl f64&gt;::ln::_{{closure}} (17 samples, 0.12%)</title><rect x="13.2275%" y="197" width="0.1232%" height="15" fill="rgb(233,42,35)" fg:x="1825" fg:w="17"/><text x="13.4775%" y="207.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_shape_trusted_iter_unchecked (19 samples, 0.14%)</title><rect x="13.2203%" y="341" width="0.1377%" height="15" fill="rgb(231,13,6)" fg:x="1824" fg:w="19"/><text x="13.4703%" y="351.50"></text></g><g><title>ndarray::iterators::to_vec_mapped (19 samples, 0.14%)</title><rect x="13.2203%" y="325" width="0.1377%" height="15" fill="rgb(207,181,40)" fg:x="1824" fg:w="19"/><text x="13.4703%" y="335.50"></text></g><g><title>&lt;ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt; as simple_network::algebra::AlgebraExt&gt;::ln (20 samples, 0.14%)</title><rect x="13.2203%" y="389" width="0.1450%" height="15" fill="rgb(254,173,49)" fg:x="1824" fg:w="20"/><text x="13.4703%" y="399.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv (20 samples, 0.14%)</title><rect x="13.2203%" y="373" width="0.1450%" height="15" fill="rgb(221,1,38)" fg:x="1824" fg:w="20"/><text x="13.4703%" y="383.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (20 samples, 0.14%)</title><rect x="13.2203%" y="357" width="0.1450%" height="15" fill="rgb(206,124,46)" fg:x="1824" fg:w="20"/><text x="13.4703%" y="367.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Mul&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::mul (2 samples, 0.01%)</title><rect x="13.3725%" y="389" width="0.0145%" height="15" fill="rgb(249,21,11)" fg:x="1845" fg:w="2"/><text x="13.6225%" y="399.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_same_shape (2 samples, 0.01%)</title><rect x="13.3725%" y="373" width="0.0145%" height="15" fill="rgb(222,201,40)" fg:x="1845" fg:w="2"/><text x="13.6225%" y="383.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Neg for &amp;ndarray::ArrayBase&lt;S,D&gt;&gt;::neg (2 samples, 0.01%)</title><rect x="13.3870%" y="389" width="0.0145%" height="15" fill="rgb(235,61,29)" fg:x="1847" fg:w="2"/><text x="13.6370%" y="399.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (2 samples, 0.01%)</title><rect x="13.3870%" y="373" width="0.0145%" height="15" fill="rgb(219,207,3)" fg:x="1847" fg:w="2"/><text x="13.6370%" y="383.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.03%)</title><rect x="13.4160%" y="325" width="0.0290%" height="15" fill="rgb(222,56,46)" fg:x="1851" fg:w="4"/><text x="13.6660%" y="335.50"></text></g><g><title>ndarray::iterators::to_vec_mapped::_{{closure}} (2 samples, 0.01%)</title><rect x="13.4305%" y="309" width="0.0145%" height="15" fill="rgb(239,76,54)" fg:x="1853" fg:w="2"/><text x="13.6805%" y="319.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::_&lt;impl core::ops::arith::Sub&lt;&amp;ndarray::ArrayBase&lt;S,D&gt;&gt; for f64&gt;::sub::_{{closure}} (2 samples, 0.01%)</title><rect x="13.4305%" y="293" width="0.0145%" height="15" fill="rgb(231,124,27)" fg:x="1853" fg:w="2"/><text x="13.6805%" y="303.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_shape_trusted_iter_unchecked (8 samples, 0.06%)</title><rect x="13.4015%" y="357" width="0.0580%" height="15" fill="rgb(249,195,6)" fg:x="1849" fg:w="8"/><text x="13.6515%" y="367.50"></text></g><g><title>ndarray::iterators::to_vec_mapped (7 samples, 0.05%)</title><rect x="13.4087%" y="341" width="0.0507%" height="15" fill="rgb(237,174,47)" fg:x="1850" fg:w="7"/><text x="13.6587%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.01%)</title><rect x="13.4450%" y="325" width="0.0145%" height="15" fill="rgb(206,201,31)" fg:x="1855" fg:w="2"/><text x="13.6950%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.01%)</title><rect x="13.4450%" y="309" width="0.0145%" height="15" fill="rgb(231,57,52)" fg:x="1855" fg:w="2"/><text x="13.6950%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.01%)</title><rect x="13.4450%" y="293" width="0.0145%" height="15" fill="rgb(248,177,22)" fg:x="1855" fg:w="2"/><text x="13.6950%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.01%)</title><rect x="13.4450%" y="277" width="0.0145%" height="15" fill="rgb(215,211,37)" fg:x="1855" fg:w="2"/><text x="13.6950%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.01%)</title><rect x="13.4450%" y="261" width="0.0145%" height="15" fill="rgb(241,128,51)" fg:x="1855" fg:w="2"/><text x="13.6950%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.01%)</title><rect x="13.4450%" y="245" width="0.0145%" height="15" fill="rgb(227,165,31)" fg:x="1855" fg:w="2"/><text x="13.6950%" y="255.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.01%)</title><rect x="13.4450%" y="229" width="0.0145%" height="15" fill="rgb(228,167,24)" fg:x="1855" fg:w="2"/><text x="13.6950%" y="239.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Sub&lt;&amp;ndarray::ArrayBase&lt;S,D&gt;&gt; for f64&gt;::sub (9 samples, 0.07%)</title><rect x="13.4015%" y="389" width="0.0652%" height="15" fill="rgb(228,143,12)" fg:x="1849" fg:w="9"/><text x="13.6515%" y="399.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (9 samples, 0.07%)</title><rect x="13.4015%" y="373" width="0.0652%" height="15" fill="rgb(249,149,8)" fg:x="1849" fg:w="9"/><text x="13.6515%" y="383.50"></text></g><g><title>&lt;simple_network::cost::functions::cross_entropy::CrossEntropy as simple_network::cost::functions::FunctionCost&gt;::compute (36 samples, 0.26%)</title><rect x="13.2203%" y="405" width="0.2609%" height="15" fill="rgb(243,35,44)" fg:x="1824" fg:w="36"/><text x="13.4703%" y="415.50"></text></g><g><title>ndarray::numeric::impl_numeric::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mean (2 samples, 0.01%)</title><rect x="13.4667%" y="389" width="0.0145%" height="15" fill="rgb(246,89,9)" fg:x="1858" fg:w="2"/><text x="13.7167%" y="399.50"></text></g><g><title>ndarray::numeric::impl_numeric::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::sum (2 samples, 0.01%)</title><rect x="13.4667%" y="373" width="0.0145%" height="15" fill="rgb(233,213,13)" fg:x="1858" fg:w="2"/><text x="13.7167%" y="383.50"></text></g><g><title>simple_network::metrics::Tally::one_hot (2 samples, 0.01%)</title><rect x="13.4812%" y="405" width="0.0145%" height="15" fill="rgb(233,141,41)" fg:x="1860" fg:w="2"/><text x="13.7312%" y="415.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2 samples, 0.01%)</title><rect x="13.4812%" y="389" width="0.0145%" height="15" fill="rgb(239,167,4)" fg:x="1860" fg:w="2"/><text x="13.7312%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (2 samples, 0.01%)</title><rect x="13.4812%" y="373" width="0.0145%" height="15" fill="rgb(209,217,16)" fg:x="1860" fg:w="2"/><text x="13.7312%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2 samples, 0.01%)</title><rect x="13.4812%" y="357" width="0.0145%" height="15" fill="rgb(219,88,35)" fg:x="1860" fg:w="2"/><text x="13.7312%" y="367.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.01%)</title><rect x="13.4957%" y="357" width="0.0145%" height="15" fill="rgb(220,193,23)" fg:x="1862" fg:w="2"/><text x="13.7457%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.01%)</title><rect x="13.4957%" y="341" width="0.0145%" height="15" fill="rgb(230,90,52)" fg:x="1862" fg:w="2"/><text x="13.7457%" y="351.50"></text></g><g><title>simple_network::metrics::Tally::t_cost (42 samples, 0.30%)</title><rect x="13.2203%" y="421" width="0.3044%" height="15" fill="rgb(252,106,19)" fg:x="1824" fg:w="42"/><text x="13.4703%" y="431.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::contains_key (4 samples, 0.03%)</title><rect x="13.4957%" y="405" width="0.0290%" height="15" fill="rgb(206,74,20)" fg:x="1862" fg:w="4"/><text x="13.7457%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (4 samples, 0.03%)</title><rect x="13.4957%" y="389" width="0.0290%" height="15" fill="rgb(230,138,44)" fg:x="1862" fg:w="4"/><text x="13.7457%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (4 samples, 0.03%)</title><rect x="13.4957%" y="373" width="0.0290%" height="15" fill="rgb(235,182,43)" fg:x="1862" fg:w="4"/><text x="13.7457%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (2 samples, 0.01%)</title><rect x="13.5102%" y="357" width="0.0145%" height="15" fill="rgb(242,16,51)" fg:x="1864" fg:w="2"/><text x="13.7602%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.01%)</title><rect x="13.5102%" y="341" width="0.0145%" height="15" fill="rgb(248,9,4)" fg:x="1864" fg:w="2"/><text x="13.7602%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (2 samples, 0.01%)</title><rect x="13.5102%" y="325" width="0.0145%" height="15" fill="rgb(210,31,22)" fg:x="1864" fg:w="2"/><text x="13.7602%" y="335.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.01%)</title><rect x="13.5247%" y="357" width="0.0145%" height="15" fill="rgb(239,54,39)" fg:x="1866" fg:w="2"/><text x="13.7747%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.01%)</title><rect x="13.5247%" y="341" width="0.0145%" height="15" fill="rgb(230,99,41)" fg:x="1866" fg:w="2"/><text x="13.7747%" y="351.50"></text></g><g><title>simple_network::metrics::Tally::t_match (4 samples, 0.03%)</title><rect x="13.5247%" y="421" width="0.0290%" height="15" fill="rgb(253,106,12)" fg:x="1866" fg:w="4"/><text x="13.7747%" y="431.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::contains_key (4 samples, 0.03%)</title><rect x="13.5247%" y="405" width="0.0290%" height="15" fill="rgb(213,46,41)" fg:x="1866" fg:w="4"/><text x="13.7747%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (4 samples, 0.03%)</title><rect x="13.5247%" y="389" width="0.0290%" height="15" fill="rgb(215,133,35)" fg:x="1866" fg:w="4"/><text x="13.7747%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (4 samples, 0.03%)</title><rect x="13.5247%" y="373" width="0.0290%" height="15" fill="rgb(213,28,5)" fg:x="1866" fg:w="4"/><text x="13.7747%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (2 samples, 0.01%)</title><rect x="13.5392%" y="357" width="0.0145%" height="15" fill="rgb(215,77,49)" fg:x="1868" fg:w="2"/><text x="13.7892%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.01%)</title><rect x="13.5392%" y="341" width="0.0145%" height="15" fill="rgb(248,100,22)" fg:x="1868" fg:w="2"/><text x="13.7892%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (2 samples, 0.01%)</title><rect x="13.5392%" y="325" width="0.0145%" height="15" fill="rgb(208,67,9)" fg:x="1868" fg:w="2"/><text x="13.7892%" y="335.50"></text></g><g><title>core::ptr::write (5 samples, 0.04%)</title><rect x="13.5682%" y="293" width="0.0362%" height="15" fill="rgb(219,133,21)" fg:x="1872" fg:w="5"/><text x="13.8182%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (34 samples, 0.25%)</title><rect x="13.5682%" y="325" width="0.2464%" height="15" fill="rgb(246,46,29)" fg:x="1872" fg:w="34"/><text x="13.8182%" y="335.50"></text></g><g><title>ndarray::iterators::to_vec_mapped::_{{closure}} (34 samples, 0.25%)</title><rect x="13.5682%" y="309" width="0.2464%" height="15" fill="rgb(246,185,52)" fg:x="1872" fg:w="34"/><text x="13.8182%" y="319.50"></text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv::_{{closure}} (29 samples, 0.21%)</title><rect x="13.6044%" y="293" width="0.2102%" height="15" fill="rgb(252,136,11)" fg:x="1877" fg:w="29"/><text x="13.8544%" y="303.50"></text></g><g><title>&lt;ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt; as simple_network::algebra::AlgebraExt&gt;::activate::_{{closure}} (29 samples, 0.21%)</title><rect x="13.6044%" y="277" width="0.2102%" height="15" fill="rgb(219,138,53)" fg:x="1877" fg:w="29"/><text x="13.8544%" y="287.50"></text></g><g><title>&lt;simple_network::activation::functions::sigmoid::Sigmoid as simple_network::activation::functions::FunctionAct&gt;::compute (29 samples, 0.21%)</title><rect x="13.6044%" y="261" width="0.2102%" height="15" fill="rgb(211,51,23)" fg:x="1877" fg:w="29"/><text x="13.8544%" y="271.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::exp (23 samples, 0.17%)</title><rect x="13.6479%" y="245" width="0.1667%" height="15" fill="rgb(247,221,28)" fg:x="1883" fg:w="23"/><text x="13.8979%" y="255.50"></text></g><g><title>__GI___exp (23 samples, 0.17%)</title><rect x="13.6479%" y="229" width="0.1667%" height="15" fill="rgb(251,222,45)" fg:x="1883" fg:w="23"/><text x="13.8979%" y="239.50"></text></g><g><title>__ieee754_exp_sse2 (15 samples, 0.11%)</title><rect x="13.7059%" y="213" width="0.1087%" height="15" fill="rgb(217,162,53)" fg:x="1891" fg:w="15"/><text x="13.9559%" y="223.50"></text></g><g><title>top12 (2 samples, 0.01%)</title><rect x="13.8001%" y="197" width="0.0145%" height="15" fill="rgb(229,93,14)" fg:x="1904" fg:w="2"/><text x="14.0501%" y="207.50"></text></g><g><title>asuint64 (2 samples, 0.01%)</title><rect x="13.8001%" y="181" width="0.0145%" height="15" fill="rgb(209,67,49)" fg:x="1904" fg:w="2"/><text x="14.0501%" y="191.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.01%)</title><rect x="13.8146%" y="213" width="0.0145%" height="15" fill="rgb(213,87,29)" fg:x="1906" fg:w="2"/><text x="14.0646%" y="223.50"></text></g><g><title>tcache_get (2 samples, 0.01%)</title><rect x="13.8146%" y="197" width="0.0145%" height="15" fill="rgb(205,151,52)" fg:x="1906" fg:w="2"/><text x="14.0646%" y="207.50"></text></g><g><title>tcache_get_n (2 samples, 0.01%)</title><rect x="13.8146%" y="181" width="0.0145%" height="15" fill="rgb(253,215,39)" fg:x="1906" fg:w="2"/><text x="14.0646%" y="191.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_shape_trusted_iter_unchecked (39 samples, 0.28%)</title><rect x="13.5537%" y="357" width="0.2827%" height="15" fill="rgb(221,220,41)" fg:x="1870" fg:w="39"/><text x="13.8037%" y="367.50"></text></g><g><title>ndarray::iterators::to_vec_mapped (37 samples, 0.27%)</title><rect x="13.5682%" y="341" width="0.2682%" height="15" fill="rgb(218,133,21)" fg:x="1872" fg:w="37"/><text x="13.8182%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3 samples, 0.02%)</title><rect x="13.8146%" y="325" width="0.0217%" height="15" fill="rgb(221,193,43)" fg:x="1906" fg:w="3"/><text x="14.0646%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.02%)</title><rect x="13.8146%" y="309" width="0.0217%" height="15" fill="rgb(240,128,52)" fg:x="1906" fg:w="3"/><text x="14.0646%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.02%)</title><rect x="13.8146%" y="293" width="0.0217%" height="15" fill="rgb(253,114,12)" fg:x="1906" fg:w="3"/><text x="14.0646%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.02%)</title><rect x="13.8146%" y="277" width="0.0217%" height="15" fill="rgb(215,223,47)" fg:x="1906" fg:w="3"/><text x="14.0646%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.02%)</title><rect x="13.8146%" y="261" width="0.0217%" height="15" fill="rgb(248,225,23)" fg:x="1906" fg:w="3"/><text x="14.0646%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.02%)</title><rect x="13.8146%" y="245" width="0.0217%" height="15" fill="rgb(250,108,0)" fg:x="1906" fg:w="3"/><text x="14.0646%" y="255.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.02%)</title><rect x="13.8146%" y="229" width="0.0217%" height="15" fill="rgb(228,208,7)" fg:x="1906" fg:w="3"/><text x="14.0646%" y="239.50"></text></g><g><title>&lt;ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt; as simple_network::algebra::AlgebraExt&gt;::activate (40 samples, 0.29%)</title><rect x="13.5537%" y="405" width="0.2899%" height="15" fill="rgb(244,45,10)" fg:x="1870" fg:w="40"/><text x="13.8037%" y="415.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv (40 samples, 0.29%)</title><rect x="13.5537%" y="389" width="0.2899%" height="15" fill="rgb(207,125,25)" fg:x="1870" fg:w="40"/><text x="13.8037%" y="399.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (40 samples, 0.29%)</title><rect x="13.5537%" y="373" width="0.2899%" height="15" fill="rgb(210,195,18)" fg:x="1870" fg:w="40"/><text x="13.8037%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2 samples, 0.01%)</title><rect x="13.8436%" y="373" width="0.0145%" height="15" fill="rgb(249,80,12)" fg:x="1910" fg:w="2"/><text x="14.0936%" y="383.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (2 samples, 0.01%)</title><rect x="13.8436%" y="357" width="0.0145%" height="15" fill="rgb(221,65,9)" fg:x="1910" fg:w="2"/><text x="14.0936%" y="367.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2 samples, 0.01%)</title><rect x="13.8436%" y="341" width="0.0145%" height="15" fill="rgb(235,49,36)" fg:x="1910" fg:w="2"/><text x="14.0936%" y="351.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Add&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::add (4 samples, 0.03%)</title><rect x="13.8436%" y="389" width="0.0290%" height="15" fill="rgb(225,32,20)" fg:x="1910" fg:w="4"/><text x="14.0936%" y="399.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_same_shape (2 samples, 0.01%)</title><rect x="13.8581%" y="373" width="0.0145%" height="15" fill="rgb(215,141,46)" fg:x="1912" fg:w="2"/><text x="14.1081%" y="383.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_shape_vec_unchecked (2 samples, 0.01%)</title><rect x="13.8871%" y="357" width="0.0145%" height="15" fill="rgb(250,160,47)" fg:x="1916" fg:w="2"/><text x="14.1371%" y="367.50"></text></g><g><title>ATL_dJIK0x0x0NN0x0x0_aX_bX (38 samples, 0.28%)</title><rect x="13.9451%" y="309" width="0.2754%" height="15" fill="rgb(216,222,40)" fg:x="1924" fg:w="38"/><text x="14.1951%" y="319.50"></text></g><g><title>ATL_dJIK56x56x56TN56x56x0_a1_bX (7 samples, 0.05%)</title><rect x="14.1697%" y="293" width="0.0507%" height="15" fill="rgb(234,217,39)" fg:x="1955" fg:w="7"/><text x="14.4197%" y="303.50"></text></g><g><title>ATL_dJIK0x0x48NN0x0x0_aX_bX (863 samples, 6.25%)</title><rect x="14.2205%" y="309" width="6.2550%" height="15" fill="rgb(207,178,40)" fg:x="1962" fg:w="863"/><text x="14.4705%" y="319.50">ATL_dJIK..</text></g><g><title>[libatlas.so.3.10.3] (98 samples, 0.71%)</title><rect x="19.7652%" y="293" width="0.7103%" height="15" fill="rgb(221,136,13)" fg:x="2727" fg:w="98"/><text x="20.0152%" y="303.50"></text></g><g><title>ATL_dgemm (915 samples, 6.63%)</title><rect x="13.9016%" y="341" width="6.6319%" height="15" fill="rgb(249,199,10)" fg:x="1918" fg:w="915"/><text x="14.1516%" y="351.50">ATL_dgemm</text></g><g><title>ATL_dNCmmJIK (915 samples, 6.63%)</title><rect x="13.9016%" y="325" width="6.6319%" height="15" fill="rgb(249,222,13)" fg:x="1918" fg:w="915"/><text x="14.1516%" y="335.50">ATL_dNCmm..</text></g><g><title>ATL_dgezero (8 samples, 0.06%)</title><rect x="20.4755%" y="309" width="0.0580%" height="15" fill="rgb(244,185,38)" fg:x="2825" fg:w="8"/><text x="20.7255%" y="319.50"></text></g><g><title>cblas_dgemm (2 samples, 0.01%)</title><rect x="20.5407%" y="341" width="0.0145%" height="15" fill="rgb(236,202,9)" fg:x="2834" fg:w="2"/><text x="20.7907%" y="351.50"></text></g><g><title>&lt;ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt; as simple_network::algebra::AlgebraExt&gt;::weighted_sum (928 samples, 6.73%)</title><rect x="13.8436%" y="405" width="6.7261%" height="15" fill="rgb(250,229,37)" fg:x="1910" fg:w="928"/><text x="14.0936%" y="415.50">&lt;ndarray:..</text></g><g><title>ndarray::linalg::impl_linalg::_&lt;impl ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt;::dot (924 samples, 6.70%)</title><rect x="13.8726%" y="389" width="6.6971%" height="15" fill="rgb(206,174,23)" fg:x="1914" fg:w="924"/><text x="14.1226%" y="399.50">ndarray::..</text></g><g><title>&lt;ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt; as ndarray::linalg::impl_linalg::Dot&lt;ndarray::ArrayBase&lt;S2,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt;&gt;::dot (924 samples, 6.70%)</title><rect x="13.8726%" y="373" width="6.6971%" height="15" fill="rgb(211,33,43)" fg:x="1914" fg:w="924"/><text x="14.1226%" y="383.50">&lt;ndarray:..</text></g><g><title>ndarray::linalg::impl_linalg::mat_mul_impl (920 samples, 6.67%)</title><rect x="13.9016%" y="357" width="6.6681%" height="15" fill="rgb(245,58,50)" fg:x="1918" fg:w="920"/><text x="14.1516%" y="367.50">ndarray::..</text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.01%)</title><rect x="20.5697%" y="405" width="0.0145%" height="15" fill="rgb(244,68,36)" fg:x="2838" fg:w="2"/><text x="20.8197%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;simple_network::network::Network::predict_::{{closure}}&gt; (2 samples, 0.01%)</title><rect x="20.5697%" y="389" width="0.0145%" height="15" fill="rgb(232,229,15)" fg:x="2838" fg:w="2"/><text x="20.8197%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="20.5697%" y="373" width="0.0145%" height="15" fill="rgb(254,30,23)" fg:x="2838" fg:w="2"/><text x="20.8197%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;&gt; (2 samples, 0.01%)</title><rect x="20.5697%" y="357" width="0.0145%" height="15" fill="rgb(235,160,14)" fg:x="2838" fg:w="2"/><text x="20.8197%" y="367.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="20.5697%" y="341" width="0.0145%" height="15" fill="rgb(212,155,44)" fg:x="2838" fg:w="2"/><text x="20.8197%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f64&gt;&gt; (2 samples, 0.01%)</title><rect x="20.5697%" y="325" width="0.0145%" height="15" fill="rgb(226,2,50)" fg:x="2838" fg:w="2"/><text x="20.8197%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f64&gt;&gt; (2 samples, 0.01%)</title><rect x="20.5697%" y="309" width="0.0145%" height="15" fill="rgb(234,177,6)" fg:x="2838" fg:w="2"/><text x="20.8197%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="20.5697%" y="293" width="0.0145%" height="15" fill="rgb(217,24,9)" fg:x="2838" fg:w="2"/><text x="20.8197%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.01%)</title><rect x="20.5697%" y="277" width="0.0145%" height="15" fill="rgb(220,13,46)" fg:x="2838" fg:w="2"/><text x="20.8197%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.01%)</title><rect x="20.5697%" y="261" width="0.0145%" height="15" fill="rgb(239,221,27)" fg:x="2838" fg:w="2"/><text x="20.8197%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5 samples, 0.04%)</title><rect x="20.5987%" y="325" width="0.0362%" height="15" fill="rgb(222,198,25)" fg:x="2842" fg:w="5"/><text x="20.8487%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5 samples, 0.04%)</title><rect x="20.5987%" y="309" width="0.0362%" height="15" fill="rgb(211,99,13)" fg:x="2842" fg:w="5"/><text x="20.8487%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (5 samples, 0.04%)</title><rect x="20.5987%" y="293" width="0.0362%" height="15" fill="rgb(232,111,31)" fg:x="2842" fg:w="5"/><text x="20.8487%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.04%)</title><rect x="20.5987%" y="277" width="0.0362%" height="15" fill="rgb(245,82,37)" fg:x="2842" fg:w="5"/><text x="20.8487%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.04%)</title><rect x="20.5987%" y="261" width="0.0362%" height="15" fill="rgb(227,149,46)" fg:x="2842" fg:w="5"/><text x="20.8487%" y="271.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.04%)</title><rect x="20.5987%" y="245" width="0.0362%" height="15" fill="rgb(218,36,50)" fg:x="2842" fg:w="5"/><text x="20.8487%" y="255.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.04%)</title><rect x="20.5987%" y="229" width="0.0362%" height="15" fill="rgb(226,80,48)" fg:x="2842" fg:w="5"/><text x="20.8487%" y="239.50"></text></g><g><title>_int_malloc (4 samples, 0.03%)</title><rect x="20.6059%" y="213" width="0.0290%" height="15" fill="rgb(238,224,15)" fg:x="2843" fg:w="4"/><text x="20.8559%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (67 samples, 0.49%)</title><rect x="20.5987%" y="389" width="0.4856%" height="15" fill="rgb(241,136,10)" fg:x="2842" fg:w="67"/><text x="20.8487%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (67 samples, 0.49%)</title><rect x="20.5987%" y="373" width="0.4856%" height="15" fill="rgb(208,32,45)" fg:x="2842" fg:w="67"/><text x="20.8487%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (67 samples, 0.49%)</title><rect x="20.5987%" y="357" width="0.4856%" height="15" fill="rgb(207,135,9)" fg:x="2842" fg:w="67"/><text x="20.8487%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (67 samples, 0.49%)</title><rect x="20.5987%" y="341" width="0.4856%" height="15" fill="rgb(206,86,44)" fg:x="2842" fg:w="67"/><text x="20.8487%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (62 samples, 0.45%)</title><rect x="20.6349%" y="325" width="0.4494%" height="15" fill="rgb(245,177,15)" fg:x="2847" fg:w="62"/><text x="20.8849%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (62 samples, 0.45%)</title><rect x="20.6349%" y="309" width="0.4494%" height="15" fill="rgb(206,64,50)" fg:x="2847" fg:w="62"/><text x="20.8849%" y="319.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (62 samples, 0.45%)</title><rect x="20.6349%" y="293" width="0.4494%" height="15" fill="rgb(234,36,40)" fg:x="2847" fg:w="62"/><text x="20.8849%" y="303.50"></text></g><g><title>simple_network::network::Network::evaluate (1,092 samples, 7.91%)</title><rect x="13.1840%" y="437" width="7.9148%" height="15" fill="rgb(213,64,8)" fg:x="1819" fg:w="1092"/><text x="13.4340%" y="447.50">simple_netw..</text></g><g><title>simple_network::network::Network::predict_ (1,041 samples, 7.55%)</title><rect x="13.5537%" y="421" width="7.5451%" height="15" fill="rgb(210,75,36)" fg:x="1870" fg:w="1041"/><text x="13.8037%" y="431.50">simple_net..</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::to_owned (70 samples, 0.51%)</title><rect x="20.5914%" y="405" width="0.5074%" height="15" fill="rgb(229,88,21)" fg:x="2841" fg:w="70"/><text x="20.8414%" y="415.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::as_slice_memory_order (2 samples, 0.01%)</title><rect x="21.0843%" y="389" width="0.0145%" height="15" fill="rgb(252,204,47)" fg:x="2909" fg:w="2"/><text x="21.3343%" y="399.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::is_contiguous (2 samples, 0.01%)</title><rect x="21.0843%" y="373" width="0.0145%" height="15" fill="rgb(208,77,27)" fg:x="2909" fg:w="2"/><text x="21.3343%" y="383.50"></text></g><g><title>ndarray::dimension::dimension_trait::Dimension::is_contiguous (2 samples, 0.01%)</title><rect x="21.0843%" y="357" width="0.0145%" height="15" fill="rgb(221,76,26)" fg:x="2909" fg:w="2"/><text x="21.3343%" y="367.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Mul&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::mul (7 samples, 0.05%)</title><rect x="21.1133%" y="293" width="0.0507%" height="15" fill="rgb(225,139,18)" fg:x="2913" fg:w="7"/><text x="21.3633%" y="303.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_same_shape (6 samples, 0.04%)</title><rect x="21.1205%" y="277" width="0.0435%" height="15" fill="rgb(230,137,11)" fg:x="2914" fg:w="6"/><text x="21.3705%" y="287.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::clone_iopf::_{{closure}} (3 samples, 0.02%)</title><rect x="21.1423%" y="261" width="0.0217%" height="15" fill="rgb(212,28,1)" fg:x="2917" fg:w="3"/><text x="21.3923%" y="271.50"></text></g><g><title>core::ops::function::Fn::call (3 samples, 0.02%)</title><rect x="21.1423%" y="245" width="0.0217%" height="15" fill="rgb(248,164,17)" fg:x="2917" fg:w="3"/><text x="21.3923%" y="255.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (3 samples, 0.02%)</title><rect x="21.1423%" y="229" width="0.0217%" height="15" fill="rgb(222,171,42)" fg:x="2917" fg:w="3"/><text x="21.3923%" y="239.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Mul&lt;B&gt; for &amp;ndarray::ArrayBase&lt;S,D&gt;&gt;::mul (6 samples, 0.04%)</title><rect x="21.1640%" y="293" width="0.0435%" height="15" fill="rgb(243,84,45)" fg:x="2920" fg:w="6"/><text x="21.4140%" y="303.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (6 samples, 0.04%)</title><rect x="21.1640%" y="277" width="0.0435%" height="15" fill="rgb(252,49,23)" fg:x="2920" fg:w="6"/><text x="21.4140%" y="287.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_shape_trusted_iter_unchecked (6 samples, 0.04%)</title><rect x="21.1640%" y="261" width="0.0435%" height="15" fill="rgb(215,19,7)" fg:x="2920" fg:w="6"/><text x="21.4140%" y="271.50"></text></g><g><title>ndarray::iterators::to_vec_mapped (6 samples, 0.04%)</title><rect x="21.1640%" y="245" width="0.0435%" height="15" fill="rgb(238,81,41)" fg:x="2920" fg:w="6"/><text x="21.4140%" y="255.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.04%)</title><rect x="21.1713%" y="229" width="0.0362%" height="15" fill="rgb(210,199,37)" fg:x="2921" fg:w="5"/><text x="21.4213%" y="239.50"></text></g><g><title>ndarray::iterators::to_vec_mapped::_{{closure}} (4 samples, 0.03%)</title><rect x="21.1785%" y="213" width="0.0290%" height="15" fill="rgb(244,192,49)" fg:x="2922" fg:w="4"/><text x="21.4285%" y="223.50"></text></g><g><title>core::ptr::write (4 samples, 0.03%)</title><rect x="21.1785%" y="197" width="0.0290%" height="15" fill="rgb(226,211,11)" fg:x="2922" fg:w="4"/><text x="21.4285%" y="207.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.02%)</title><rect x="21.2148%" y="149" width="0.0217%" height="15" fill="rgb(236,162,54)" fg:x="2927" fg:w="3"/><text x="21.4648%" y="159.50"></text></g><g><title>_int_malloc (3 samples, 0.02%)</title><rect x="21.2148%" y="133" width="0.0217%" height="15" fill="rgb(220,229,9)" fg:x="2927" fg:w="3"/><text x="21.4648%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (5 samples, 0.04%)</title><rect x="21.2148%" y="261" width="0.0362%" height="15" fill="rgb(250,87,22)" fg:x="2927" fg:w="5"/><text x="21.4648%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5 samples, 0.04%)</title><rect x="21.2148%" y="245" width="0.0362%" height="15" fill="rgb(239,43,17)" fg:x="2927" fg:w="5"/><text x="21.4648%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5 samples, 0.04%)</title><rect x="21.2148%" y="229" width="0.0362%" height="15" fill="rgb(231,177,25)" fg:x="2927" fg:w="5"/><text x="21.4648%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (5 samples, 0.04%)</title><rect x="21.2148%" y="213" width="0.0362%" height="15" fill="rgb(219,179,1)" fg:x="2927" fg:w="5"/><text x="21.4648%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.04%)</title><rect x="21.2148%" y="197" width="0.0362%" height="15" fill="rgb(238,219,53)" fg:x="2927" fg:w="5"/><text x="21.4648%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.04%)</title><rect x="21.2148%" y="181" width="0.0362%" height="15" fill="rgb(232,167,36)" fg:x="2927" fg:w="5"/><text x="21.4648%" y="191.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.04%)</title><rect x="21.2148%" y="165" width="0.0362%" height="15" fill="rgb(244,19,51)" fg:x="2927" fg:w="5"/><text x="21.4648%" y="175.50"></text></g><g><title>ATL_dcol2blk_a1 (12 samples, 0.09%)</title><rect x="21.2872%" y="213" width="0.0870%" height="15" fill="rgb(224,6,22)" fg:x="2937" fg:w="12"/><text x="21.5372%" y="223.50"></text></g><g><title>ATL_dJIK0x0x32TN32x32x0_a1_bX (3,908 samples, 28.32%)</title><rect x="21.4177%" y="181" width="28.3250%" height="15" fill="rgb(224,145,5)" fg:x="2955" fg:w="3908"/><text x="21.6677%" y="191.50">ATL_dJIK0x0x32TN32x32x0_a1_bX</text></g><g><title>ATL_dMBJBmm (4,054 samples, 29.38%)</title><rect x="21.4177%" y="197" width="29.3832%" height="15" fill="rgb(234,130,49)" fg:x="2955" fg:w="4054"/><text x="21.6677%" y="207.50">ATL_dMBJBmm</text></g><g><title>ATL_dgezero (146 samples, 1.06%)</title><rect x="49.7427%" y="181" width="1.0582%" height="15" fill="rgb(254,6,2)" fg:x="6863" fg:w="146"/><text x="49.9927%" y="191.50"></text></g><g><title>ATL_dmmIJK2 (4,389 samples, 31.81%)</title><rect x="21.3742%" y="213" width="31.8113%" height="15" fill="rgb(208,96,46)" fg:x="2949" fg:w="4389"/><text x="21.6242%" y="223.50">ATL_dmmIJK2</text></g><g><title>[libatlas.so.3.10.3] (328 samples, 2.38%)</title><rect x="50.8081%" y="197" width="2.3773%" height="15" fill="rgb(239,3,39)" fg:x="7010" fg:w="328"/><text x="51.0581%" y="207.50">[l..</text></g><g><title>ATL_dgemm (4,407 samples, 31.94%)</title><rect x="21.2582%" y="245" width="31.9417%" height="15" fill="rgb(233,210,1)" fg:x="2933" fg:w="4407"/><text x="21.5082%" y="255.50">ATL_dgemm</text></g><g><title>ATL_dmmIJK (4,407 samples, 31.94%)</title><rect x="21.2582%" y="229" width="31.9417%" height="15" fill="rgb(244,137,37)" fg:x="2933" fg:w="4407"/><text x="21.5082%" y="239.50">ATL_dmmIJK</text></g><g><title>__GI___libc_free (2 samples, 0.01%)</title><rect x="53.1855%" y="213" width="0.0145%" height="15" fill="rgb(240,136,2)" fg:x="7338" fg:w="2"/><text x="53.4355%" y="223.50"></text></g><g><title>_int_free_merge_chunk (2 samples, 0.01%)</title><rect x="53.1855%" y="197" width="0.0145%" height="15" fill="rgb(239,18,37)" fg:x="7338" fg:w="2"/><text x="53.4355%" y="207.50"></text></g><g><title>__GI___libc_free (2 samples, 0.01%)</title><rect x="53.2145%" y="181" width="0.0145%" height="15" fill="rgb(218,185,22)" fg:x="7342" fg:w="2"/><text x="53.4645%" y="191.50"></text></g><g><title>_int_free_merge_chunk (2 samples, 0.01%)</title><rect x="53.2145%" y="165" width="0.0145%" height="15" fill="rgb(225,218,4)" fg:x="7342" fg:w="2"/><text x="53.4645%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.02%)</title><rect x="53.2362%" y="117" width="0.0217%" height="15" fill="rgb(230,182,32)" fg:x="7345" fg:w="3"/><text x="53.4862%" y="127.50"></text></g><g><title>matrixmultiply::kernel::GemmKernel::pack_nr (4 samples, 0.03%)</title><rect x="53.2362%" y="165" width="0.0290%" height="15" fill="rgb(242,56,43)" fg:x="7345" fg:w="4"/><text x="53.4862%" y="175.50"></text></g><g><title>matrixmultiply::packing::pack (4 samples, 0.03%)</title><rect x="53.2362%" y="149" width="0.0290%" height="15" fill="rgb(233,99,24)" fg:x="7345" fg:w="4"/><text x="53.4862%" y="159.50"></text></g><g><title>matrixmultiply::packing::pack_impl (4 samples, 0.03%)</title><rect x="53.2362%" y="133" width="0.0290%" height="15" fill="rgb(234,209,42)" fg:x="7345" fg:w="4"/><text x="53.4862%" y="143.50"></text></g><g><title>&lt;matrixmultiply::util::RangeChunk as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="53.2652%" y="149" width="0.0145%" height="15" fill="rgb(227,7,12)" fg:x="7349" fg:w="2"/><text x="53.5152%" y="159.50"></text></g><g><title>&lt;matrixmultiply::dgemm_kernel::KernelSse2 as matrixmultiply::kernel::GemmKernel&gt;::kernel (62 samples, 0.45%)</title><rect x="53.3014%" y="69" width="0.4494%" height="15" fill="rgb(245,203,43)" fg:x="7354" fg:w="62"/><text x="53.5514%" y="79.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_target_sse2 (62 samples, 0.45%)</title><rect x="53.3014%" y="53" width="0.4494%" height="15" fill="rgb(238,205,33)" fg:x="7354" fg:w="62"/><text x="53.5514%" y="63.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_fallback_impl (62 samples, 0.45%)</title><rect x="53.3014%" y="37" width="0.4494%" height="15" fill="rgb(231,56,7)" fg:x="7354" fg:w="62"/><text x="53.5514%" y="47.50"></text></g><g><title>matrixmultiply::gemm::gemm_packed (74 samples, 0.54%)</title><rect x="53.2797%" y="133" width="0.5363%" height="15" fill="rgb(244,186,29)" fg:x="7351" fg:w="74"/><text x="53.5297%" y="143.50"></text></g><g><title>matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (74 samples, 0.54%)</title><rect x="53.2797%" y="117" width="0.5363%" height="15" fill="rgb(234,111,31)" fg:x="7351" fg:w="74"/><text x="53.5297%" y="127.50"></text></g><g><title>matrixmultiply::gemm::gemm_packed::_{{closure}} (73 samples, 0.53%)</title><rect x="53.2869%" y="101" width="0.5291%" height="15" fill="rgb(241,149,10)" fg:x="7352" fg:w="73"/><text x="53.5369%" y="111.50"></text></g><g><title>matrixmultiply::gemm::masked_kernel (71 samples, 0.51%)</title><rect x="53.3014%" y="85" width="0.5146%" height="15" fill="rgb(249,206,44)" fg:x="7354" fg:w="71"/><text x="53.5514%" y="95.50"></text></g><g><title>matrixmultiply::gemm::c_to_masked_ab_beta_c (9 samples, 0.07%)</title><rect x="53.7508%" y="69" width="0.0652%" height="15" fill="rgb(251,153,30)" fg:x="7416" fg:w="9"/><text x="54.0008%" y="79.50"></text></g><g><title>&lt;matrixmultiply::gemm::GemmParameters&lt;T&gt; as matrixmultiply::kernel::GemmSelect&lt;T&gt;&gt;::select (86 samples, 0.62%)</title><rect x="53.2145%" y="197" width="0.6233%" height="15" fill="rgb(239,152,38)" fg:x="7342" fg:w="86"/><text x="53.4645%" y="207.50"></text></g><g><title>matrixmultiply::gemm::gemm_loop (84 samples, 0.61%)</title><rect x="53.2290%" y="181" width="0.6088%" height="15" fill="rgb(249,139,47)" fg:x="7344" fg:w="84"/><text x="53.4790%" y="191.50"></text></g><g><title>matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (79 samples, 0.57%)</title><rect x="53.2652%" y="165" width="0.5726%" height="15" fill="rgb(244,64,35)" fg:x="7349" fg:w="79"/><text x="53.5152%" y="175.50"></text></g><g><title>matrixmultiply::gemm::gemm_loop::_{{closure}} (77 samples, 0.56%)</title><rect x="53.2797%" y="149" width="0.5581%" height="15" fill="rgb(216,46,15)" fg:x="7351" fg:w="77"/><text x="53.5297%" y="159.50"></text></g><g><title>matrixmultiply::kernel::GemmKernel::pack_mr (3 samples, 0.02%)</title><rect x="53.8160%" y="133" width="0.0217%" height="15" fill="rgb(250,74,19)" fg:x="7425" fg:w="3"/><text x="54.0660%" y="143.50"></text></g><g><title>matrixmultiply::packing::pack (3 samples, 0.02%)</title><rect x="53.8160%" y="117" width="0.0217%" height="15" fill="rgb(249,42,33)" fg:x="7425" fg:w="3"/><text x="54.0660%" y="127.50"></text></g><g><title>matrixmultiply::packing::pack_impl (3 samples, 0.02%)</title><rect x="53.8160%" y="101" width="0.0217%" height="15" fill="rgb(242,149,17)" fg:x="7425" fg:w="3"/><text x="54.0660%" y="111.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.02%)</title><rect x="53.8160%" y="85" width="0.0217%" height="15" fill="rgb(244,29,21)" fg:x="7425" fg:w="3"/><text x="54.0660%" y="95.50"></text></g><g><title>ndarray::linalg::impl_linalg::_&lt;impl ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt;::dot (4,503 samples, 32.64%)</title><rect x="21.2075%" y="293" width="32.6375%" height="15" fill="rgb(220,130,37)" fg:x="2926" fg:w="4503"/><text x="21.4575%" y="303.50">ndarray::linalg::impl_linalg::_&lt;impl ndarray::ArrayBa..</text></g><g><title>&lt;ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt; as ndarray::linalg::impl_linalg::Dot&lt;ndarray::ArrayBase&lt;S2,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt;&gt;::dot (4,503 samples, 32.64%)</title><rect x="21.2075%" y="277" width="32.6375%" height="15" fill="rgb(211,67,2)" fg:x="2926" fg:w="4503"/><text x="21.4575%" y="287.50">&lt;ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[u..</text></g><g><title>ndarray::linalg::impl_linalg::mat_mul_impl (4,496 samples, 32.59%)</title><rect x="21.2582%" y="261" width="32.5868%" height="15" fill="rgb(235,68,52)" fg:x="2933" fg:w="4496"/><text x="21.5082%" y="271.50">ndarray::linalg::impl_linalg::mat_mul_impl</text></g><g><title>ndarray::linalg::impl_linalg::mat_mul_general (87 samples, 0.63%)</title><rect x="53.2145%" y="245" width="0.6306%" height="15" fill="rgb(246,142,3)" fg:x="7342" fg:w="87"/><text x="53.4645%" y="255.50"></text></g><g><title>matrixmultiply::gemm::dgemm (87 samples, 0.63%)</title><rect x="53.2145%" y="229" width="0.6306%" height="15" fill="rgb(241,25,7)" fg:x="7342" fg:w="87"/><text x="53.4645%" y="239.50"></text></g><g><title>matrixmultiply::dgemm_kernel::detect (87 samples, 0.63%)</title><rect x="53.2145%" y="213" width="0.6306%" height="15" fill="rgb(242,119,39)" fg:x="7342" fg:w="87"/><text x="53.4645%" y="223.50"></text></g><g><title>&lt;simple_network::chain_layer::ComputeLayer as simple_network::chain_rule::ChainRule&gt;::chain_rule (4,522 samples, 32.78%)</title><rect x="21.1060%" y="325" width="32.7752%" height="15" fill="rgb(241,98,45)" fg:x="2912" fg:w="4522"/><text x="21.3560%" y="335.50">&lt;simple_network::chain_layer::ComputeLayer as simple_..</text></g><g><title>&lt;simple_network::chain_layer::HiddenLayerTerms as simple_network::chain_rule::ChainRule&gt;::chain_rule (4,522 samples, 32.78%)</title><rect x="21.1060%" y="309" width="32.7752%" height="15" fill="rgb(254,28,30)" fg:x="2912" fg:w="4522"/><text x="21.3560%" y="319.50">&lt;simple_network::chain_layer::HiddenLayerTerms as sim..</text></g><g><title>ndarray::numeric::impl_numeric::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::sum_axis (5 samples, 0.04%)</title><rect x="53.8450%" y="293" width="0.0362%" height="15" fill="rgb(241,142,54)" fg:x="7429" fg:w="5"/><text x="54.0950%" y="303.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,),D&gt;::map_collect (5 samples, 0.04%)</title><rect x="53.8450%" y="277" width="0.0362%" height="15" fill="rgb(222,85,15)" fg:x="7429" fg:w="5"/><text x="54.0950%" y="287.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,),D&gt;::map_collect_owned (5 samples, 0.04%)</title><rect x="53.8450%" y="261" width="0.0362%" height="15" fill="rgb(210,85,47)" fg:x="7429" fg:w="5"/><text x="54.0950%" y="271.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::build_uninit (5 samples, 0.04%)</title><rect x="53.8450%" y="245" width="0.0362%" height="15" fill="rgb(224,206,25)" fg:x="7429" fg:w="5"/><text x="54.0950%" y="255.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,),D&gt;::map_collect_owned::_{{closure}} (4 samples, 0.03%)</title><rect x="53.8523%" y="229" width="0.0290%" height="15" fill="rgb(243,201,19)" fg:x="7430" fg:w="4"/><text x="54.1023%" y="239.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,PLast),D&gt;::collect_with_partial (4 samples, 0.03%)</title><rect x="53.8523%" y="213" width="0.0290%" height="15" fill="rgb(236,59,4)" fg:x="7430" fg:w="4"/><text x="54.1023%" y="223.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (4 samples, 0.03%)</title><rect x="53.8523%" y="197" width="0.0290%" height="15" fill="rgb(254,179,45)" fg:x="7430" fg:w="4"/><text x="54.1023%" y="207.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core (4 samples, 0.03%)</title><rect x="53.8523%" y="181" width="0.0290%" height="15" fill="rgb(226,14,10)" fg:x="7430" fg:w="4"/><text x="54.1023%" y="191.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided (4 samples, 0.03%)</title><rect x="53.8523%" y="165" width="0.0290%" height="15" fill="rgb(244,27,41)" fg:x="7430" fg:w="4"/><text x="54.1023%" y="175.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided_c (4 samples, 0.03%)</title><rect x="53.8523%" y="149" width="0.0290%" height="15" fill="rgb(235,35,32)" fg:x="7430" fg:w="4"/><text x="54.1023%" y="159.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::inner (4 samples, 0.03%)</title><rect x="53.8523%" y="133" width="0.0290%" height="15" fill="rgb(218,68,31)" fg:x="7430" fg:w="4"/><text x="54.1023%" y="143.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::_{{closure}} (4 samples, 0.03%)</title><rect x="53.8523%" y="117" width="0.0290%" height="15" fill="rgb(207,120,37)" fg:x="7430" fg:w="4"/><text x="54.1023%" y="127.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,PLast),D&gt;::collect_with_partial::_{{closure}} (4 samples, 0.03%)</title><rect x="53.8523%" y="101" width="0.0290%" height="15" fill="rgb(227,98,0)" fg:x="7430" fg:w="4"/><text x="54.1023%" y="111.50"></text></g><g><title>ndarray::numeric::impl_numeric::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::sum_axis::_{{closure}} (4 samples, 0.03%)</title><rect x="53.8523%" y="85" width="0.0290%" height="15" fill="rgb(207,7,3)" fg:x="7430" fg:w="4"/><text x="54.1023%" y="95.50"></text></g><g><title>ndarray::numeric::impl_numeric::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::sum (4 samples, 0.03%)</title><rect x="53.8523%" y="69" width="0.0290%" height="15" fill="rgb(206,98,19)" fg:x="7430" fg:w="4"/><text x="54.1023%" y="79.50"></text></g><g><title>ndarray::numeric_util::unrolled_fold (3 samples, 0.02%)</title><rect x="53.8595%" y="53" width="0.0217%" height="15" fill="rgb(217,5,26)" fg:x="7431" fg:w="3"/><text x="54.1095%" y="63.50"></text></g><g><title>ndarray::impl_clone::&lt;impl core::clone::Clone for ndarray::ArrayBase&lt;S,D&gt;&gt;::clone (6 samples, 0.04%)</title><rect x="53.8958%" y="325" width="0.0435%" height="15" fill="rgb(235,190,38)" fg:x="7436" fg:w="6"/><text x="54.1458%" y="335.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as ndarray::data_traits::RawDataClone&gt;::clone_with_ptr (6 samples, 0.04%)</title><rect x="53.8958%" y="309" width="0.0435%" height="15" fill="rgb(247,86,24)" fg:x="7436" fg:w="6"/><text x="54.1458%" y="319.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as core::clone::Clone&gt;::clone (6 samples, 0.04%)</title><rect x="53.8958%" y="293" width="0.0435%" height="15" fill="rgb(205,101,16)" fg:x="7436" fg:w="6"/><text x="54.1458%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (6 samples, 0.04%)</title><rect x="53.8958%" y="277" width="0.0435%" height="15" fill="rgb(246,168,33)" fg:x="7436" fg:w="6"/><text x="54.1458%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (6 samples, 0.04%)</title><rect x="53.8958%" y="261" width="0.0435%" height="15" fill="rgb(231,114,1)" fg:x="7436" fg:w="6"/><text x="54.1458%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (6 samples, 0.04%)</title><rect x="53.8958%" y="245" width="0.0435%" height="15" fill="rgb(207,184,53)" fg:x="7436" fg:w="6"/><text x="54.1458%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (6 samples, 0.04%)</title><rect x="53.8958%" y="229" width="0.0435%" height="15" fill="rgb(224,95,51)" fg:x="7436" fg:w="6"/><text x="54.1458%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (6 samples, 0.04%)</title><rect x="53.8958%" y="213" width="0.0435%" height="15" fill="rgb(212,188,45)" fg:x="7436" fg:w="6"/><text x="54.1458%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (6 samples, 0.04%)</title><rect x="53.8958%" y="197" width="0.0435%" height="15" fill="rgb(223,154,38)" fg:x="7436" fg:w="6"/><text x="54.1458%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.04%)</title><rect x="53.8958%" y="181" width="0.0435%" height="15" fill="rgb(251,22,52)" fg:x="7436" fg:w="6"/><text x="54.1458%" y="191.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (6 samples, 0.04%)</title><rect x="53.8958%" y="165" width="0.0435%" height="15" fill="rgb(229,209,22)" fg:x="7436" fg:w="6"/><text x="54.1458%" y="175.50"></text></g><g><title>core::ptr::write (5 samples, 0.04%)</title><rect x="53.9755%" y="213" width="0.0362%" height="15" fill="rgb(234,138,34)" fg:x="7447" fg:w="5"/><text x="54.2255%" y="223.50"></text></g><g><title>__exp_finite@GLIBC_2.15@plt (8 samples, 0.06%)</title><rect x="54.6496%" y="117" width="0.0580%" height="15" fill="rgb(212,95,11)" fg:x="7540" fg:w="8"/><text x="54.8996%" y="127.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (179 samples, 1.30%)</title><rect x="53.9465%" y="245" width="1.2974%" height="15" fill="rgb(240,179,47)" fg:x="7443" fg:w="179"/><text x="54.1965%" y="255.50"></text></g><g><title>ndarray::iterators::to_vec_mapped::_{{closure}} (176 samples, 1.28%)</title><rect x="53.9683%" y="229" width="1.2756%" height="15" fill="rgb(240,163,11)" fg:x="7446" fg:w="176"/><text x="54.2183%" y="239.50"></text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv::_{{closure}} (170 samples, 1.23%)</title><rect x="54.0117%" y="213" width="1.2322%" height="15" fill="rgb(236,37,12)" fg:x="7452" fg:w="170"/><text x="54.2617%" y="223.50"></text></g><g><title>simple_network::term_cache::TermCache::nonlinear_derivative::_{{closure}} (170 samples, 1.23%)</title><rect x="54.0117%" y="197" width="1.2322%" height="15" fill="rgb(232,164,16)" fg:x="7452" fg:w="170"/><text x="54.2617%" y="207.50"></text></g><g><title>&lt;simple_network::activation::functions::sigmoid::Sigmoid as simple_network::activation::functions::FunctionAct&gt;::derivative (170 samples, 1.23%)</title><rect x="54.0117%" y="181" width="1.2322%" height="15" fill="rgb(244,205,15)" fg:x="7452" fg:w="170"/><text x="54.2617%" y="191.50"></text></g><g><title>&lt;simple_network::activation::functions::sigmoid::Sigmoid as simple_network::activation::functions::FunctionAct&gt;::compute (143 samples, 1.04%)</title><rect x="54.2074%" y="165" width="1.0365%" height="15" fill="rgb(223,117,47)" fg:x="7479" fg:w="143"/><text x="54.4574%" y="175.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::exp (103 samples, 0.75%)</title><rect x="54.4974%" y="149" width="0.7465%" height="15" fill="rgb(244,107,35)" fg:x="7519" fg:w="103"/><text x="54.7474%" y="159.50"></text></g><g><title>__GI___exp (102 samples, 0.74%)</title><rect x="54.5046%" y="133" width="0.7393%" height="15" fill="rgb(205,140,8)" fg:x="7520" fg:w="102"/><text x="54.7546%" y="143.50"></text></g><g><title>__ieee754_exp_sse2 (74 samples, 0.54%)</title><rect x="54.7075%" y="117" width="0.5363%" height="15" fill="rgb(228,84,46)" fg:x="7548" fg:w="74"/><text x="54.9575%" y="127.50"></text></g><g><title>top12 (2 samples, 0.01%)</title><rect x="55.2294%" y="101" width="0.0145%" height="15" fill="rgb(254,188,9)" fg:x="7620" fg:w="2"/><text x="55.4794%" y="111.50"></text></g><g><title>asuint64 (2 samples, 0.01%)</title><rect x="55.2294%" y="85" width="0.0145%" height="15" fill="rgb(206,112,54)" fg:x="7620" fg:w="2"/><text x="55.4794%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4,712 samples, 34.15%)</title><rect x="21.0988%" y="405" width="34.1524%" height="15" fill="rgb(216,84,49)" fg:x="2911" fg:w="4712"/><text x="21.3488%" y="415.50">&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::tra..</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::fold (4,712 samples, 34.15%)</title><rect x="21.0988%" y="389" width="34.1524%" height="15" fill="rgb(214,194,35)" fg:x="2911" fg:w="4712"/><text x="21.3488%" y="399.50">&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::ada..</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::SpecFold&gt;::spec_fold (4,712 samples, 34.15%)</title><rect x="21.0988%" y="373" width="34.1524%" height="15" fill="rgb(249,28,3)" fg:x="2911" fg:w="4712"/><text x="21.3488%" y="383.50">&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::ada..</text></g><g><title>simple_network::network::Network::backward_pass::_{{closure}} (4,711 samples, 34.15%)</title><rect x="21.1060%" y="357" width="34.1451%" height="15" fill="rgb(222,56,52)" fg:x="2912" fg:w="4711"/><text x="21.3560%" y="367.50">simple_network::network::Network::backward_pass::_{{clo..</text></g><g><title>simple_network::chain_rule::ChainRuleComputation::fold_layer (4,711 samples, 34.15%)</title><rect x="21.1060%" y="341" width="34.1451%" height="15" fill="rgb(245,217,50)" fg:x="2912" fg:w="4711"/><text x="21.3560%" y="351.50">simple_network::chain_rule::ChainRuleComputation::fold_..</text></g><g><title>simple_network::term_cache::TermCache::nonlinear_derivative (180 samples, 1.30%)</title><rect x="53.9465%" y="325" width="1.3046%" height="15" fill="rgb(213,201,24)" fg:x="7443" fg:w="180"/><text x="54.1965%" y="335.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv (180 samples, 1.30%)</title><rect x="53.9465%" y="309" width="1.3046%" height="15" fill="rgb(248,116,28)" fg:x="7443" fg:w="180"/><text x="54.1965%" y="319.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (180 samples, 1.30%)</title><rect x="53.9465%" y="293" width="1.3046%" height="15" fill="rgb(219,72,43)" fg:x="7443" fg:w="180"/><text x="54.1965%" y="303.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_shape_trusted_iter_unchecked (180 samples, 1.30%)</title><rect x="53.9465%" y="277" width="1.3046%" height="15" fill="rgb(209,138,14)" fg:x="7443" fg:w="180"/><text x="54.1965%" y="287.50"></text></g><g><title>ndarray::iterators::to_vec_mapped (180 samples, 1.30%)</title><rect x="53.9465%" y="261" width="1.3046%" height="15" fill="rgb(222,18,33)" fg:x="7443" fg:w="180"/><text x="54.1965%" y="271.50"></text></g><g><title>matrixmultiply::kernel::GemmKernel::pack_nr (7 samples, 0.05%)</title><rect x="55.2801%" y="229" width="0.0507%" height="15" fill="rgb(213,199,7)" fg:x="7627" fg:w="7"/><text x="55.5301%" y="239.50"></text></g><g><title>matrixmultiply::packing::pack (7 samples, 0.05%)</title><rect x="55.2801%" y="213" width="0.0507%" height="15" fill="rgb(250,110,10)" fg:x="7627" fg:w="7"/><text x="55.5301%" y="223.50"></text></g><g><title>matrixmultiply::packing::pack_impl (7 samples, 0.05%)</title><rect x="55.2801%" y="197" width="0.0507%" height="15" fill="rgb(248,123,6)" fg:x="7627" fg:w="7"/><text x="55.5301%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.05%)</title><rect x="55.2801%" y="181" width="0.0507%" height="15" fill="rgb(206,91,31)" fg:x="7627" fg:w="7"/><text x="55.5301%" y="191.50"></text></g><g><title>&lt;matrixmultiply::dgemm_kernel::KernelSse2 as matrixmultiply::kernel::GemmKernel&gt;::kernel (59 samples, 0.43%)</title><rect x="55.3309%" y="133" width="0.4276%" height="15" fill="rgb(211,154,13)" fg:x="7634" fg:w="59"/><text x="55.5809%" y="143.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_target_sse2 (59 samples, 0.43%)</title><rect x="55.3309%" y="117" width="0.4276%" height="15" fill="rgb(225,148,7)" fg:x="7634" fg:w="59"/><text x="55.5809%" y="127.50"></text></g><g><title>matrixmultiply::dgemm_kernel::kernel_fallback_impl (59 samples, 0.43%)</title><rect x="55.3309%" y="101" width="0.4276%" height="15" fill="rgb(220,160,43)" fg:x="7634" fg:w="59"/><text x="55.5809%" y="111.50"></text></g><g><title>matrixmultiply::dgemm_kernel::at (3 samples, 0.02%)</title><rect x="55.7368%" y="85" width="0.0217%" height="15" fill="rgb(213,52,39)" fg:x="7690" fg:w="3"/><text x="55.9868%" y="95.50"></text></g><g><title>matrixmultiply::gemm::gemm_packed (60 samples, 0.43%)</title><rect x="55.3309%" y="197" width="0.4349%" height="15" fill="rgb(243,137,7)" fg:x="7634" fg:w="60"/><text x="55.5809%" y="207.50"></text></g><g><title>matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (60 samples, 0.43%)</title><rect x="55.3309%" y="181" width="0.4349%" height="15" fill="rgb(230,79,13)" fg:x="7634" fg:w="60"/><text x="55.5809%" y="191.50"></text></g><g><title>matrixmultiply::gemm::gemm_packed::_{{closure}} (60 samples, 0.43%)</title><rect x="55.3309%" y="165" width="0.4349%" height="15" fill="rgb(247,105,23)" fg:x="7634" fg:w="60"/><text x="55.5809%" y="175.50"></text></g><g><title>matrixmultiply::gemm::masked_kernel (60 samples, 0.43%)</title><rect x="55.3309%" y="149" width="0.4349%" height="15" fill="rgb(223,179,41)" fg:x="7634" fg:w="60"/><text x="55.5809%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.03%)</title><rect x="55.7657%" y="149" width="0.0290%" height="15" fill="rgb(218,9,34)" fg:x="7694" fg:w="4"/><text x="56.0157%" y="159.50"></text></g><g><title>ndarray::linalg::impl_linalg::_&lt;impl ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt;::dot (74 samples, 0.54%)</title><rect x="55.2656%" y="357" width="0.5363%" height="15" fill="rgb(222,106,8)" fg:x="7625" fg:w="74"/><text x="55.5156%" y="367.50"></text></g><g><title>&lt;ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt; as ndarray::linalg::impl_linalg::Dot&lt;ndarray::ArrayBase&lt;S2,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt;&gt;::dot (74 samples, 0.54%)</title><rect x="55.2656%" y="341" width="0.5363%" height="15" fill="rgb(211,220,0)" fg:x="7625" fg:w="74"/><text x="55.5156%" y="351.50"></text></g><g><title>ndarray::linalg::impl_linalg::mat_mul_impl (73 samples, 0.53%)</title><rect x="55.2729%" y="325" width="0.5291%" height="15" fill="rgb(229,52,16)" fg:x="7626" fg:w="73"/><text x="55.5229%" y="335.50"></text></g><g><title>ndarray::linalg::impl_linalg::mat_mul_general (73 samples, 0.53%)</title><rect x="55.2729%" y="309" width="0.5291%" height="15" fill="rgb(212,155,18)" fg:x="7626" fg:w="73"/><text x="55.5229%" y="319.50"></text></g><g><title>matrixmultiply::gemm::dgemm (73 samples, 0.53%)</title><rect x="55.2729%" y="293" width="0.5291%" height="15" fill="rgb(242,21,14)" fg:x="7626" fg:w="73"/><text x="55.5229%" y="303.50"></text></g><g><title>matrixmultiply::dgemm_kernel::detect (73 samples, 0.53%)</title><rect x="55.2729%" y="277" width="0.5291%" height="15" fill="rgb(222,19,48)" fg:x="7626" fg:w="73"/><text x="55.5229%" y="287.50"></text></g><g><title>&lt;matrixmultiply::gemm::GemmParameters&lt;T&gt; as matrixmultiply::kernel::GemmSelect&lt;T&gt;&gt;::select (73 samples, 0.53%)</title><rect x="55.2729%" y="261" width="0.5291%" height="15" fill="rgb(232,45,27)" fg:x="7626" fg:w="73"/><text x="55.5229%" y="271.50"></text></g><g><title>matrixmultiply::gemm::gemm_loop (73 samples, 0.53%)</title><rect x="55.2729%" y="245" width="0.5291%" height="15" fill="rgb(249,103,42)" fg:x="7626" fg:w="73"/><text x="55.5229%" y="255.50"></text></g><g><title>matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (65 samples, 0.47%)</title><rect x="55.3309%" y="229" width="0.4711%" height="15" fill="rgb(246,81,33)" fg:x="7634" fg:w="65"/><text x="55.5809%" y="239.50"></text></g><g><title>matrixmultiply::gemm::gemm_loop::_{{closure}} (65 samples, 0.47%)</title><rect x="55.3309%" y="213" width="0.4711%" height="15" fill="rgb(252,33,42)" fg:x="7634" fg:w="65"/><text x="55.5809%" y="223.50"></text></g><g><title>matrixmultiply::kernel::GemmKernel::pack_mr (5 samples, 0.04%)</title><rect x="55.7657%" y="197" width="0.0362%" height="15" fill="rgb(209,212,41)" fg:x="7694" fg:w="5"/><text x="56.0157%" y="207.50"></text></g><g><title>matrixmultiply::packing::pack (5 samples, 0.04%)</title><rect x="55.7657%" y="181" width="0.0362%" height="15" fill="rgb(207,154,6)" fg:x="7694" fg:w="5"/><text x="56.0157%" y="191.50"></text></g><g><title>matrixmultiply::packing::pack_impl (5 samples, 0.04%)</title><rect x="55.7657%" y="165" width="0.0362%" height="15" fill="rgb(223,64,47)" fg:x="7694" fg:w="5"/><text x="56.0157%" y="175.50"></text></g><g><title>&lt;simple_network::chain_layer::ComputeLayer as simple_network::chain_rule::ChainRule&gt;::chain_rule (77 samples, 0.56%)</title><rect x="55.2584%" y="389" width="0.5581%" height="15" fill="rgb(211,161,38)" fg:x="7624" fg:w="77"/><text x="55.5084%" y="399.50"></text></g><g><title>&lt;simple_network::chain_layer::OutputLayerTerms as simple_network::chain_rule::ChainRule&gt;::chain_rule (77 samples, 0.56%)</title><rect x="55.2584%" y="373" width="0.5581%" height="15" fill="rgb(219,138,40)" fg:x="7624" fg:w="77"/><text x="55.5084%" y="383.50"></text></g><g><title>ndarray::numeric::impl_numeric::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::sum_axis (2 samples, 0.01%)</title><rect x="55.8020%" y="357" width="0.0145%" height="15" fill="rgb(241,228,46)" fg:x="7699" fg:w="2"/><text x="56.0520%" y="367.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,),D&gt;::map_collect (2 samples, 0.01%)</title><rect x="55.8020%" y="341" width="0.0145%" height="15" fill="rgb(223,209,38)" fg:x="7699" fg:w="2"/><text x="56.0520%" y="351.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,),D&gt;::map_collect_owned (2 samples, 0.01%)</title><rect x="55.8020%" y="325" width="0.0145%" height="15" fill="rgb(236,164,45)" fg:x="7699" fg:w="2"/><text x="56.0520%" y="335.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::build_uninit (2 samples, 0.01%)</title><rect x="55.8020%" y="309" width="0.0145%" height="15" fill="rgb(231,15,5)" fg:x="7699" fg:w="2"/><text x="56.0520%" y="319.50"></text></g><g><title>core::ptr::write (3 samples, 0.02%)</title><rect x="55.8382%" y="261" width="0.0217%" height="15" fill="rgb(252,35,15)" fg:x="7704" fg:w="3"/><text x="56.0882%" y="271.50"></text></g><g><title>__exp_finite@GLIBC_2.15@plt (2 samples, 0.01%)</title><rect x="56.0702%" y="165" width="0.0145%" height="15" fill="rgb(248,181,18)" fg:x="7736" fg:w="2"/><text x="56.3202%" y="175.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (72 samples, 0.52%)</title><rect x="55.8310%" y="293" width="0.5219%" height="15" fill="rgb(233,39,42)" fg:x="7703" fg:w="72"/><text x="56.0810%" y="303.50"></text></g><g><title>ndarray::iterators::to_vec_mapped::_{{closure}} (71 samples, 0.51%)</title><rect x="55.8382%" y="277" width="0.5146%" height="15" fill="rgb(238,110,33)" fg:x="7704" fg:w="71"/><text x="56.0882%" y="287.50"></text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv::_{{closure}} (68 samples, 0.49%)</title><rect x="55.8600%" y="261" width="0.4929%" height="15" fill="rgb(233,195,10)" fg:x="7707" fg:w="68"/><text x="56.1100%" y="271.50"></text></g><g><title>simple_network::term_cache::TermCache::nonlinear_derivative::_{{closure}} (68 samples, 0.49%)</title><rect x="55.8600%" y="245" width="0.4929%" height="15" fill="rgb(254,105,3)" fg:x="7707" fg:w="68"/><text x="56.1100%" y="255.50"></text></g><g><title>&lt;simple_network::activation::functions::sigmoid::Sigmoid as simple_network::activation::functions::FunctionAct&gt;::derivative (68 samples, 0.49%)</title><rect x="55.8600%" y="229" width="0.4929%" height="15" fill="rgb(221,225,9)" fg:x="7707" fg:w="68"/><text x="56.1100%" y="239.50"></text></g><g><title>&lt;simple_network::activation::functions::sigmoid::Sigmoid as simple_network::activation::functions::FunctionAct&gt;::compute (56 samples, 0.41%)</title><rect x="55.9469%" y="213" width="0.4059%" height="15" fill="rgb(224,227,45)" fg:x="7719" fg:w="56"/><text x="56.1969%" y="223.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::exp (50 samples, 0.36%)</title><rect x="55.9904%" y="197" width="0.3624%" height="15" fill="rgb(229,198,43)" fg:x="7725" fg:w="50"/><text x="56.2404%" y="207.50"></text></g><g><title>__GI___exp (50 samples, 0.36%)</title><rect x="55.9904%" y="181" width="0.3624%" height="15" fill="rgb(206,209,35)" fg:x="7725" fg:w="50"/><text x="56.2404%" y="191.50"></text></g><g><title>__ieee754_exp_sse2 (37 samples, 0.27%)</title><rect x="56.0847%" y="165" width="0.2682%" height="15" fill="rgb(245,195,53)" fg:x="7738" fg:w="37"/><text x="56.3347%" y="175.50"></text></g><g><title>top12 (4 samples, 0.03%)</title><rect x="56.3238%" y="149" width="0.0290%" height="15" fill="rgb(240,92,26)" fg:x="7771" fg:w="4"/><text x="56.5738%" y="159.50"></text></g><g><title>asuint64 (2 samples, 0.01%)</title><rect x="56.3383%" y="133" width="0.0145%" height="15" fill="rgb(207,40,23)" fg:x="7773" fg:w="2"/><text x="56.5883%" y="143.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv (73 samples, 0.53%)</title><rect x="55.8310%" y="357" width="0.5291%" height="15" fill="rgb(223,111,35)" fg:x="7703" fg:w="73"/><text x="56.0810%" y="367.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (73 samples, 0.53%)</title><rect x="55.8310%" y="341" width="0.5291%" height="15" fill="rgb(229,147,28)" fg:x="7703" fg:w="73"/><text x="56.0810%" y="351.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_shape_trusted_iter_unchecked (73 samples, 0.53%)</title><rect x="55.8310%" y="325" width="0.5291%" height="15" fill="rgb(211,29,28)" fg:x="7703" fg:w="73"/><text x="56.0810%" y="335.50"></text></g><g><title>ndarray::iterators::to_vec_mapped (73 samples, 0.53%)</title><rect x="55.8310%" y="309" width="0.5291%" height="15" fill="rgb(228,72,33)" fg:x="7703" fg:w="73"/><text x="56.0810%" y="319.50"></text></g><g><title>simple_network::term_cache::TermCache::nonlinear_derivative (75 samples, 0.54%)</title><rect x="55.8237%" y="373" width="0.5436%" height="15" fill="rgb(205,214,31)" fg:x="7702" fg:w="75"/><text x="56.0737%" y="383.50"></text></g><g><title>&lt;simple_network::cost::functions::cross_entropy::CrossEntropy as simple_network::cost::functions::FunctionCost&gt;::derivative (5 samples, 0.04%)</title><rect x="56.3891%" y="357" width="0.0362%" height="15" fill="rgb(224,111,15)" fg:x="7780" fg:w="5"/><text x="56.6391%" y="367.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Sub&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for &amp;ndarray::ArrayBase&lt;S,D&gt;&gt;::sub (5 samples, 0.04%)</title><rect x="56.3891%" y="341" width="0.0362%" height="15" fill="rgb(253,21,26)" fg:x="7780" fg:w="5"/><text x="56.6391%" y="351.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::map_collect (4 samples, 0.03%)</title><rect x="56.3963%" y="325" width="0.0290%" height="15" fill="rgb(245,139,43)" fg:x="7781" fg:w="4"/><text x="56.6463%" y="335.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::map_collect_owned (4 samples, 0.03%)</title><rect x="56.3963%" y="309" width="0.0290%" height="15" fill="rgb(252,170,7)" fg:x="7781" fg:w="4"/><text x="56.6463%" y="319.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::build_uninit (4 samples, 0.03%)</title><rect x="56.3963%" y="293" width="0.0290%" height="15" fill="rgb(231,118,14)" fg:x="7781" fg:w="4"/><text x="56.6463%" y="303.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::map_collect_owned::_{{closure}} (3 samples, 0.02%)</title><rect x="56.4036%" y="277" width="0.0217%" height="15" fill="rgb(238,83,0)" fg:x="7782" fg:w="3"/><text x="56.6536%" y="287.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2,PLast),D&gt;::collect_with_partial (2 samples, 0.01%)</title><rect x="56.4108%" y="261" width="0.0145%" height="15" fill="rgb(221,39,39)" fg:x="7783" fg:w="2"/><text x="56.6608%" y="271.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2,P3),D&gt;::for_each (2 samples, 0.01%)</title><rect x="56.4108%" y="245" width="0.0145%" height="15" fill="rgb(222,119,46)" fg:x="7783" fg:w="2"/><text x="56.6608%" y="255.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core (2 samples, 0.01%)</title><rect x="56.4108%" y="229" width="0.0145%" height="15" fill="rgb(222,165,49)" fg:x="7783" fg:w="2"/><text x="56.6608%" y="239.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_contiguous (2 samples, 0.01%)</title><rect x="56.4108%" y="213" width="0.0145%" height="15" fill="rgb(219,113,52)" fg:x="7783" fg:w="2"/><text x="56.6608%" y="223.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::inner (2 samples, 0.01%)</title><rect x="56.4108%" y="197" width="0.0145%" height="15" fill="rgb(214,7,15)" fg:x="7783" fg:w="2"/><text x="56.6608%" y="207.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2,P3),D&gt;::for_each::_{{closure}} (2 samples, 0.01%)</title><rect x="56.4108%" y="181" width="0.0145%" height="15" fill="rgb(235,32,4)" fg:x="7783" fg:w="2"/><text x="56.6608%" y="191.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2,PLast),D&gt;::collect_with_partial::_{{closure}} (2 samples, 0.01%)</title><rect x="56.4108%" y="165" width="0.0145%" height="15" fill="rgb(238,90,54)" fg:x="7783" fg:w="2"/><text x="56.6608%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="56.4326%" y="357" width="0.0145%" height="15" fill="rgb(213,208,19)" fg:x="7786" fg:w="2"/><text x="56.6826%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;&gt; (2 samples, 0.01%)</title><rect x="56.4326%" y="341" width="0.0145%" height="15" fill="rgb(233,156,4)" fg:x="7786" fg:w="2"/><text x="56.6826%" y="351.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="56.4326%" y="325" width="0.0145%" height="15" fill="rgb(207,194,5)" fg:x="7786" fg:w="2"/><text x="56.6826%" y="335.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zeros (2 samples, 0.01%)</title><rect x="56.4543%" y="357" width="0.0145%" height="15" fill="rgb(206,111,30)" fg:x="7789" fg:w="2"/><text x="56.7043%" y="367.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (2 samples, 0.01%)</title><rect x="56.4543%" y="341" width="0.0145%" height="15" fill="rgb(243,70,54)" fg:x="7789" fg:w="2"/><text x="56.7043%" y="351.50"></text></g><g><title>alloc::vec::from_elem (2 samples, 0.01%)</title><rect x="56.4543%" y="325" width="0.0145%" height="15" fill="rgb(242,28,8)" fg:x="7789" fg:w="2"/><text x="56.7043%" y="335.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (2 samples, 0.01%)</title><rect x="56.4543%" y="309" width="0.0145%" height="15" fill="rgb(219,106,18)" fg:x="7789" fg:w="2"/><text x="56.7043%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (2 samples, 0.01%)</title><rect x="56.4543%" y="293" width="0.0145%" height="15" fill="rgb(244,222,10)" fg:x="7789" fg:w="2"/><text x="56.7043%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.01%)</title><rect x="56.4543%" y="277" width="0.0145%" height="15" fill="rgb(236,179,52)" fg:x="7789" fg:w="2"/><text x="56.7043%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (2 samples, 0.01%)</title><rect x="56.4543%" y="261" width="0.0145%" height="15" fill="rgb(213,23,39)" fg:x="7789" fg:w="2"/><text x="56.7043%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.01%)</title><rect x="56.4543%" y="245" width="0.0145%" height="15" fill="rgb(238,48,10)" fg:x="7789" fg:w="2"/><text x="56.7043%" y="255.50"></text></g><g><title>alloc::alloc::alloc_zeroed (2 samples, 0.01%)</title><rect x="56.4543%" y="229" width="0.0145%" height="15" fill="rgb(251,196,23)" fg:x="7789" fg:w="2"/><text x="56.7043%" y="239.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::assign (7 samples, 0.05%)</title><rect x="56.4688%" y="357" width="0.0507%" height="15" fill="rgb(250,152,24)" fg:x="7791" fg:w="7"/><text x="56.7188%" y="367.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with (7 samples, 0.05%)</title><rect x="56.4688%" y="341" width="0.0507%" height="15" fill="rgb(209,150,17)" fg:x="7791" fg:w="7"/><text x="56.7188%" y="351.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_same_shape (7 samples, 0.05%)</title><rect x="56.4688%" y="325" width="0.0507%" height="15" fill="rgb(234,202,34)" fg:x="7791" fg:w="7"/><text x="56.7188%" y="335.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_by_rows (7 samples, 0.05%)</title><rect x="56.4688%" y="309" width="0.0507%" height="15" fill="rgb(253,148,53)" fg:x="7791" fg:w="7"/><text x="56.7188%" y="319.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (7 samples, 0.05%)</title><rect x="56.4688%" y="293" width="0.0507%" height="15" fill="rgb(218,129,16)" fg:x="7791" fg:w="7"/><text x="56.7188%" y="303.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core (7 samples, 0.05%)</title><rect x="56.4688%" y="277" width="0.0507%" height="15" fill="rgb(216,85,19)" fg:x="7791" fg:w="7"/><text x="56.7188%" y="287.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::_{{closure}} (7 samples, 0.05%)</title><rect x="56.4688%" y="261" width="0.0507%" height="15" fill="rgb(235,228,7)" fg:x="7791" fg:w="7"/><text x="56.7188%" y="271.50"></text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_by_rows::_{{closure}} (7 samples, 0.05%)</title><rect x="56.4688%" y="245" width="0.0507%" height="15" fill="rgb(245,175,0)" fg:x="7791" fg:w="7"/><text x="56.7188%" y="255.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (7 samples, 0.05%)</title><rect x="56.4688%" y="229" width="0.0507%" height="15" fill="rgb(208,168,36)" fg:x="7791" fg:w="7"/><text x="56.7188%" y="239.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core (7 samples, 0.05%)</title><rect x="56.4688%" y="213" width="0.0507%" height="15" fill="rgb(246,171,24)" fg:x="7791" fg:w="7"/><text x="56.7188%" y="223.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided (7 samples, 0.05%)</title><rect x="56.4688%" y="197" width="0.0507%" height="15" fill="rgb(215,142,24)" fg:x="7791" fg:w="7"/><text x="56.7188%" y="207.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided_c (7 samples, 0.05%)</title><rect x="56.4688%" y="181" width="0.0507%" height="15" fill="rgb(250,187,7)" fg:x="7791" fg:w="7"/><text x="56.7188%" y="191.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::inner (7 samples, 0.05%)</title><rect x="56.4688%" y="165" width="0.0507%" height="15" fill="rgb(228,66,33)" fg:x="7791" fg:w="7"/><text x="56.7188%" y="175.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::slice_mut (9 samples, 0.07%)</title><rect x="56.5195%" y="357" width="0.0652%" height="15" fill="rgb(234,215,21)" fg:x="7798" fg:w="9"/><text x="56.7695%" y="367.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::slice_move (9 samples, 0.07%)</title><rect x="56.5195%" y="341" width="0.0652%" height="15" fill="rgb(222,191,20)" fg:x="7798" fg:w="9"/><text x="56.7695%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (9 samples, 0.07%)</title><rect x="56.5195%" y="325" width="0.0652%" height="15" fill="rgb(245,79,54)" fg:x="7798" fg:w="9"/><text x="56.7695%" y="335.50"></text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::slice_move::_{{closure}} (9 samples, 0.07%)</title><rect x="56.5195%" y="309" width="0.0652%" height="15" fill="rgb(240,10,37)" fg:x="7798" fg:w="9"/><text x="56.7695%" y="319.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::slice_axis_inplace (7 samples, 0.05%)</title><rect x="56.5340%" y="293" width="0.0507%" height="15" fill="rgb(214,192,32)" fg:x="7800" fg:w="7"/><text x="56.7840%" y="303.50"></text></g><g><title>ndarray::dimension::do_slice (6 samples, 0.04%)</title><rect x="56.5413%" y="277" width="0.0435%" height="15" fill="rgb(209,36,54)" fg:x="7801" fg:w="6"/><text x="56.7913%" y="287.50"></text></g><g><title>ndarray::dimension::to_abs_slice (4 samples, 0.03%)</title><rect x="56.5558%" y="261" width="0.0290%" height="15" fill="rgb(220,10,11)" fg:x="7803" fg:w="4"/><text x="56.8058%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.02%)</title><rect x="56.5993%" y="197" width="0.0217%" height="15" fill="rgb(221,106,17)" fg:x="7809" fg:w="3"/><text x="56.8493%" y="207.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (5 samples, 0.04%)</title><rect x="56.5920%" y="261" width="0.0362%" height="15" fill="rgb(251,142,44)" fg:x="7808" fg:w="5"/><text x="56.8420%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (5 samples, 0.04%)</title><rect x="56.5920%" y="245" width="0.0362%" height="15" fill="rgb(238,13,15)" fg:x="7808" fg:w="5"/><text x="56.8420%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (5 samples, 0.04%)</title><rect x="56.5920%" y="229" width="0.0362%" height="15" fill="rgb(208,107,27)" fg:x="7808" fg:w="5"/><text x="56.8420%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (5 samples, 0.04%)</title><rect x="56.5920%" y="213" width="0.0362%" height="15" fill="rgb(205,136,37)" fg:x="7808" fg:w="5"/><text x="56.8420%" y="223.50"></text></g><g><title>hashbrown::map::make_hash (7 samples, 0.05%)</title><rect x="56.5920%" y="293" width="0.0507%" height="15" fill="rgb(250,205,27)" fg:x="7808" fg:w="7"/><text x="56.8420%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (7 samples, 0.05%)</title><rect x="56.5920%" y="277" width="0.0507%" height="15" fill="rgb(210,80,43)" fg:x="7808" fg:w="7"/><text x="56.8420%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.01%)</title><rect x="56.6283%" y="261" width="0.0145%" height="15" fill="rgb(247,160,36)" fg:x="7813" fg:w="2"/><text x="56.8783%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (2 samples, 0.01%)</title><rect x="56.6283%" y="245" width="0.0145%" height="15" fill="rgb(234,13,49)" fg:x="7813" fg:w="2"/><text x="56.8783%" y="255.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.01%)</title><rect x="56.6283%" y="229" width="0.0145%" height="15" fill="rgb(234,122,0)" fg:x="7813" fg:w="2"/><text x="56.8783%" y="239.50"></text></g><g><title>simple_network::term_cache::TermCache::cost_derivative (116 samples, 0.84%)</title><rect x="55.8237%" y="389" width="0.8408%" height="15" fill="rgb(207,146,38)" fg:x="7702" fg:w="116"/><text x="56.0737%" y="399.50"></text></g><g><title>simple_network::term_cache::TermCache::partial_cost_derivative (41 samples, 0.30%)</title><rect x="56.3673%" y="373" width="0.2972%" height="15" fill="rgb(207,177,25)" fg:x="7777" fg:w="41"/><text x="56.6173%" y="383.50"></text></g><g><title>simple_network::term_cache::TermCache::one_hot (11 samples, 0.08%)</title><rect x="56.5848%" y="357" width="0.0797%" height="15" fill="rgb(211,178,42)" fg:x="7807" fg:w="11"/><text x="56.8348%" y="367.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (11 samples, 0.08%)</title><rect x="56.5848%" y="341" width="0.0797%" height="15" fill="rgb(230,69,54)" fg:x="7807" fg:w="11"/><text x="56.8348%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (11 samples, 0.08%)</title><rect x="56.5848%" y="325" width="0.0797%" height="15" fill="rgb(214,135,41)" fg:x="7807" fg:w="11"/><text x="56.8348%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (11 samples, 0.08%)</title><rect x="56.5848%" y="309" width="0.0797%" height="15" fill="rgb(237,67,25)" fg:x="7807" fg:w="11"/><text x="56.8348%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (3 samples, 0.02%)</title><rect x="56.6427%" y="293" width="0.0217%" height="15" fill="rgb(222,189,50)" fg:x="7815" fg:w="3"/><text x="56.8927%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3 samples, 0.02%)</title><rect x="56.6427%" y="277" width="0.0217%" height="15" fill="rgb(245,148,34)" fg:x="7815" fg:w="3"/><text x="56.8927%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (3 samples, 0.02%)</title><rect x="56.6427%" y="261" width="0.0217%" height="15" fill="rgb(222,29,6)" fg:x="7815" fg:w="3"/><text x="56.8927%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.01%)</title><rect x="56.6500%" y="245" width="0.0145%" height="15" fill="rgb(221,189,43)" fg:x="7816" fg:w="2"/><text x="56.9000%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.01%)</title><rect x="56.6500%" y="229" width="0.0145%" height="15" fill="rgb(207,36,27)" fg:x="7816" fg:w="2"/><text x="56.9000%" y="239.50"></text></g><g><title>simple_network::network::Network::backward_pass (4,908 samples, 35.57%)</title><rect x="21.0988%" y="421" width="35.5730%" height="15" fill="rgb(217,90,24)" fg:x="2911" fg:w="4908"/><text x="21.3488%" y="431.50">simple_network::network::Network::backward_pass</text></g><g><title>simple_network::chain_rule::ChainRuleComputation::init (196 samples, 1.42%)</title><rect x="55.2511%" y="405" width="1.4206%" height="15" fill="rgb(224,66,35)" fg:x="7623" fg:w="196"/><text x="55.5011%" y="415.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::to_owned (192 samples, 1.39%)</title><rect x="56.6717%" y="405" width="1.3916%" height="15" fill="rgb(221,13,50)" fg:x="7819" fg:w="192"/><text x="56.9217%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (192 samples, 1.39%)</title><rect x="56.6717%" y="389" width="1.3916%" height="15" fill="rgb(236,68,49)" fg:x="7819" fg:w="192"/><text x="56.9217%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (192 samples, 1.39%)</title><rect x="56.6717%" y="373" width="1.3916%" height="15" fill="rgb(229,146,28)" fg:x="7819" fg:w="192"/><text x="56.9217%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (192 samples, 1.39%)</title><rect x="56.6717%" y="357" width="1.3916%" height="15" fill="rgb(225,31,38)" fg:x="7819" fg:w="192"/><text x="56.9217%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (192 samples, 1.39%)</title><rect x="56.6717%" y="341" width="1.3916%" height="15" fill="rgb(250,208,3)" fg:x="7819" fg:w="192"/><text x="56.9217%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (192 samples, 1.39%)</title><rect x="56.6717%" y="325" width="1.3916%" height="15" fill="rgb(246,54,23)" fg:x="7819" fg:w="192"/><text x="56.9217%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (192 samples, 1.39%)</title><rect x="56.6717%" y="309" width="1.3916%" height="15" fill="rgb(243,76,11)" fg:x="7819" fg:w="192"/><text x="56.9217%" y="319.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (192 samples, 1.39%)</title><rect x="56.6717%" y="293" width="1.3916%" height="15" fill="rgb(245,21,50)" fg:x="7819" fg:w="192"/><text x="56.9217%" y="303.50"></text></g><g><title>core::ptr::write (9 samples, 0.07%)</title><rect x="58.1431%" y="277" width="0.0652%" height="15" fill="rgb(228,9,43)" fg:x="8022" fg:w="9"/><text x="58.3931%" y="287.50"></text></g><g><title>__exp_finite@GLIBC_2.15@plt (8 samples, 0.06%)</title><rect x="58.9476%" y="197" width="0.0580%" height="15" fill="rgb(208,100,47)" fg:x="8133" fg:w="8"/><text x="59.1976%" y="207.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (225 samples, 1.63%)</title><rect x="58.0778%" y="309" width="1.6308%" height="15" fill="rgb(232,26,8)" fg:x="8013" fg:w="225"/><text x="58.3278%" y="319.50"></text></g><g><title>ndarray::iterators::to_vec_mapped::_{{closure}} (218 samples, 1.58%)</title><rect x="58.1286%" y="293" width="1.5801%" height="15" fill="rgb(216,166,38)" fg:x="8020" fg:w="218"/><text x="58.3786%" y="303.50"></text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv::_{{closure}} (207 samples, 1.50%)</title><rect x="58.2083%" y="277" width="1.5003%" height="15" fill="rgb(251,202,51)" fg:x="8031" fg:w="207"/><text x="58.4583%" y="287.50"></text></g><g><title>&lt;ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt; as simple_network::algebra::AlgebraExt&gt;::activate::_{{closure}} (207 samples, 1.50%)</title><rect x="58.2083%" y="261" width="1.5003%" height="15" fill="rgb(254,216,34)" fg:x="8031" fg:w="207"/><text x="58.4583%" y="271.50"></text></g><g><title>&lt;simple_network::activation::functions::sigmoid::Sigmoid as simple_network::activation::functions::FunctionAct&gt;::compute (207 samples, 1.50%)</title><rect x="58.2083%" y="245" width="1.5003%" height="15" fill="rgb(251,32,27)" fg:x="8031" fg:w="207"/><text x="58.4583%" y="255.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::exp (157 samples, 1.14%)</title><rect x="58.5707%" y="229" width="1.1379%" height="15" fill="rgb(208,127,28)" fg:x="8081" fg:w="157"/><text x="58.8207%" y="239.50"></text></g><g><title>__GI___exp (156 samples, 1.13%)</title><rect x="58.5780%" y="213" width="1.1307%" height="15" fill="rgb(224,137,22)" fg:x="8082" fg:w="156"/><text x="58.8280%" y="223.50"></text></g><g><title>__ieee754_exp_sse2 (97 samples, 0.70%)</title><rect x="59.0056%" y="197" width="0.7031%" height="15" fill="rgb(254,70,32)" fg:x="8141" fg:w="97"/><text x="59.2556%" y="207.50"></text></g><g><title>top12 (6 samples, 0.04%)</title><rect x="59.6651%" y="181" width="0.0435%" height="15" fill="rgb(229,75,37)" fg:x="8232" fg:w="6"/><text x="59.9151%" y="191.50"></text></g><g><title>asuint64 (3 samples, 0.02%)</title><rect x="59.6869%" y="165" width="0.0217%" height="15" fill="rgb(252,64,23)" fg:x="8235" fg:w="3"/><text x="59.9369%" y="175.50"></text></g><g><title>&lt;ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt; as simple_network::algebra::AlgebraExt&gt;::activate (229 samples, 1.66%)</title><rect x="58.0706%" y="389" width="1.6598%" height="15" fill="rgb(232,162,48)" fg:x="8012" fg:w="229"/><text x="58.3206%" y="399.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv (229 samples, 1.66%)</title><rect x="58.0706%" y="373" width="1.6598%" height="15" fill="rgb(246,160,12)" fg:x="8012" fg:w="229"/><text x="58.3206%" y="383.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (229 samples, 1.66%)</title><rect x="58.0706%" y="357" width="1.6598%" height="15" fill="rgb(247,166,0)" fg:x="8012" fg:w="229"/><text x="58.3206%" y="367.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_shape_trusted_iter_unchecked (229 samples, 1.66%)</title><rect x="58.0706%" y="341" width="1.6598%" height="15" fill="rgb(249,219,21)" fg:x="8012" fg:w="229"/><text x="58.3206%" y="351.50"></text></g><g><title>ndarray::iterators::to_vec_mapped (228 samples, 1.65%)</title><rect x="58.0778%" y="325" width="1.6525%" height="15" fill="rgb(205,209,3)" fg:x="8013" fg:w="228"/><text x="58.3278%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3 samples, 0.02%)</title><rect x="59.7086%" y="309" width="0.0217%" height="15" fill="rgb(243,44,1)" fg:x="8238" fg:w="3"/><text x="59.9586%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.02%)</title><rect x="59.7086%" y="293" width="0.0217%" height="15" fill="rgb(206,159,16)" fg:x="8238" fg:w="3"/><text x="59.9586%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.02%)</title><rect x="59.7086%" y="277" width="0.0217%" height="15" fill="rgb(244,77,30)" fg:x="8238" fg:w="3"/><text x="59.9586%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.02%)</title><rect x="59.7086%" y="261" width="0.0217%" height="15" fill="rgb(218,69,12)" fg:x="8238" fg:w="3"/><text x="59.9586%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.02%)</title><rect x="59.7086%" y="245" width="0.0217%" height="15" fill="rgb(212,87,7)" fg:x="8238" fg:w="3"/><text x="59.9586%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.02%)</title><rect x="59.7086%" y="229" width="0.0217%" height="15" fill="rgb(245,114,25)" fg:x="8238" fg:w="3"/><text x="59.9586%" y="239.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.02%)</title><rect x="59.7086%" y="213" width="0.0217%" height="15" fill="rgb(210,61,42)" fg:x="8238" fg:w="3"/><text x="59.9586%" y="223.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.02%)</title><rect x="59.7086%" y="197" width="0.0217%" height="15" fill="rgb(211,52,33)" fg:x="8238" fg:w="3"/><text x="59.9586%" y="207.50"></text></g><g><title>_int_malloc (2 samples, 0.01%)</title><rect x="59.7159%" y="181" width="0.0145%" height="15" fill="rgb(234,58,33)" fg:x="8239" fg:w="2"/><text x="59.9659%" y="191.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Add&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::add (23 samples, 0.17%)</title><rect x="59.7304%" y="373" width="0.1667%" height="15" fill="rgb(220,115,36)" fg:x="8241" fg:w="23"/><text x="59.9804%" y="383.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_same_shape (23 samples, 0.17%)</title><rect x="59.7304%" y="357" width="0.1667%" height="15" fill="rgb(243,153,54)" fg:x="8241" fg:w="23"/><text x="59.9804%" y="367.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_by_rows (23 samples, 0.17%)</title><rect x="59.7304%" y="341" width="0.1667%" height="15" fill="rgb(251,47,18)" fg:x="8241" fg:w="23"/><text x="59.9804%" y="351.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (23 samples, 0.17%)</title><rect x="59.7304%" y="325" width="0.1667%" height="15" fill="rgb(242,102,42)" fg:x="8241" fg:w="23"/><text x="59.9804%" y="335.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core (23 samples, 0.17%)</title><rect x="59.7304%" y="309" width="0.1667%" height="15" fill="rgb(234,31,38)" fg:x="8241" fg:w="23"/><text x="59.9804%" y="319.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided (23 samples, 0.17%)</title><rect x="59.7304%" y="293" width="0.1667%" height="15" fill="rgb(221,117,51)" fg:x="8241" fg:w="23"/><text x="59.9804%" y="303.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided_c (23 samples, 0.17%)</title><rect x="59.7304%" y="277" width="0.1667%" height="15" fill="rgb(212,20,18)" fg:x="8241" fg:w="23"/><text x="59.9804%" y="287.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::inner (21 samples, 0.15%)</title><rect x="59.7449%" y="261" width="0.1522%" height="15" fill="rgb(245,133,36)" fg:x="8243" fg:w="21"/><text x="59.9949%" y="271.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::_{{closure}} (21 samples, 0.15%)</title><rect x="59.7449%" y="245" width="0.1522%" height="15" fill="rgb(212,6,19)" fg:x="8243" fg:w="21"/><text x="59.9949%" y="255.50"></text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_by_rows::_{{closure}} (21 samples, 0.15%)</title><rect x="59.7449%" y="229" width="0.1522%" height="15" fill="rgb(218,1,36)" fg:x="8243" fg:w="21"/><text x="59.9949%" y="239.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (21 samples, 0.15%)</title><rect x="59.7449%" y="213" width="0.1522%" height="15" fill="rgb(246,84,54)" fg:x="8243" fg:w="21"/><text x="59.9949%" y="223.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core (21 samples, 0.15%)</title><rect x="59.7449%" y="197" width="0.1522%" height="15" fill="rgb(242,110,6)" fg:x="8243" fg:w="21"/><text x="59.9949%" y="207.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided (21 samples, 0.15%)</title><rect x="59.7449%" y="181" width="0.1522%" height="15" fill="rgb(214,47,5)" fg:x="8243" fg:w="21"/><text x="59.9949%" y="191.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided_c (21 samples, 0.15%)</title><rect x="59.7449%" y="165" width="0.1522%" height="15" fill="rgb(218,159,25)" fg:x="8243" fg:w="21"/><text x="59.9949%" y="175.50"></text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::inner (21 samples, 0.15%)</title><rect x="59.7449%" y="149" width="0.1522%" height="15" fill="rgb(215,211,28)" fg:x="8243" fg:w="21"/><text x="59.9949%" y="159.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::_{{closure}} (8 samples, 0.06%)</title><rect x="59.8391%" y="133" width="0.0580%" height="15" fill="rgb(238,59,32)" fg:x="8256" fg:w="8"/><text x="60.0891%" y="143.50"></text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_by_rows::_{{closure}}::_{{closure}} (8 samples, 0.06%)</title><rect x="59.8391%" y="117" width="0.0580%" height="15" fill="rgb(226,82,3)" fg:x="8256" fg:w="8"/><text x="60.0891%" y="127.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::clone_iopf::_{{closure}} (8 samples, 0.06%)</title><rect x="59.8391%" y="101" width="0.0580%" height="15" fill="rgb(240,164,32)" fg:x="8256" fg:w="8"/><text x="60.0891%" y="111.50"></text></g><g><title>core::ops::function::Fn::call (3 samples, 0.02%)</title><rect x="59.8753%" y="85" width="0.0217%" height="15" fill="rgb(232,46,7)" fg:x="8261" fg:w="3"/><text x="60.1253%" y="95.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (3 samples, 0.02%)</title><rect x="59.8753%" y="69" width="0.0217%" height="15" fill="rgb(229,129,53)" fg:x="8261" fg:w="3"/><text x="60.1253%" y="79.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.01%)</title><rect x="59.8971%" y="229" width="0.0145%" height="15" fill="rgb(234,188,29)" fg:x="8264" fg:w="2"/><text x="60.1471%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3 samples, 0.02%)</title><rect x="59.8971%" y="341" width="0.0217%" height="15" fill="rgb(246,141,4)" fg:x="8264" fg:w="3"/><text x="60.1471%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.02%)</title><rect x="59.8971%" y="325" width="0.0217%" height="15" fill="rgb(229,23,39)" fg:x="8264" fg:w="3"/><text x="60.1471%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.02%)</title><rect x="59.8971%" y="309" width="0.0217%" height="15" fill="rgb(206,12,3)" fg:x="8264" fg:w="3"/><text x="60.1471%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.02%)</title><rect x="59.8971%" y="293" width="0.0217%" height="15" fill="rgb(252,226,20)" fg:x="8264" fg:w="3"/><text x="60.1471%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.02%)</title><rect x="59.8971%" y="277" width="0.0217%" height="15" fill="rgb(216,123,35)" fg:x="8264" fg:w="3"/><text x="60.1471%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.02%)</title><rect x="59.8971%" y="261" width="0.0217%" height="15" fill="rgb(212,68,40)" fg:x="8264" fg:w="3"/><text x="60.1471%" y="271.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.02%)</title><rect x="59.8971%" y="245" width="0.0217%" height="15" fill="rgb(254,125,32)" fg:x="8264" fg:w="3"/><text x="60.1471%" y="255.50"></text></g><g><title>ATL_dgemm (60 samples, 0.43%)</title><rect x="59.9188%" y="325" width="0.4349%" height="15" fill="rgb(253,97,22)" fg:x="8267" fg:w="60"/><text x="60.1688%" y="335.50"></text></g><g><title>ATL_dNCmmIJK (58 samples, 0.42%)</title><rect x="59.9333%" y="309" width="0.4204%" height="15" fill="rgb(241,101,14)" fg:x="8269" fg:w="58"/><text x="60.1833%" y="319.50"></text></g><g><title>ATL_dNCmmJIK (56 samples, 0.41%)</title><rect x="59.9478%" y="293" width="0.4059%" height="15" fill="rgb(238,103,29)" fg:x="8271" fg:w="56"/><text x="60.1978%" y="303.50"></text></g><g><title>ATL_dJIK0x0x0NN0x0x0_aX_bX (53 samples, 0.38%)</title><rect x="59.9696%" y="277" width="0.3841%" height="15" fill="rgb(233,195,47)" fg:x="8274" fg:w="53"/><text x="60.2196%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (180 samples, 1.30%)</title><rect x="60.4697%" y="197" width="1.3046%" height="15" fill="rgb(246,218,30)" fg:x="8343" fg:w="180"/><text x="60.7197%" y="207.50"></text></g><g><title>matrixmultiply::kernel::GemmKernel::pack_nr (223 samples, 1.62%)</title><rect x="60.3899%" y="245" width="1.6163%" height="15" fill="rgb(219,145,47)" fg:x="8332" fg:w="223"/><text x="60.6399%" y="255.50"></text></g><g><title>matrixmultiply::packing::pack (223 samples, 1.62%)</title><rect x="60.3899%" y="229" width="1.6163%" height="15" fill="rgb(243,12,26)" fg:x="8332" fg:w="223"/><text x="60.6399%" y="239.50"></text></g><g><title>matrixmultiply::packing::pack_impl (223 samples, 1.62%)</title><rect x="60.3899%" y="213" width="1.6163%" height="15" fill="rgb(214,87,16)" fg:x="8332" fg:w="223"/><text x="60.6399%" y="223.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (32 samples, 0.23%)</title><rect x="61.7743%" y="197" width="0.2319%" height="15" fill="rgb(208,99,42)" fg:x="8523" fg:w="32"/><text x="62.0243%" y="207.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (32 samples, 0.23%)</title><rect x="61.7743%" y="181" width="0.2319%" height="15" fill="rgb(253,99,2)" fg:x="8523" fg:w="32"/><text x="62.0243%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (30 samples, 0.22%)</title><rect x="61.7888%" y="165" width="0.2174%" height="15" fill="rgb(220,168,23)" fg:x="8525" fg:w="30"/><text x="62.0388%" y="175.50"></text></g><g><title>&lt;matrixmultiply::util::RangeChunk as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="62.0207%" y="181" width="0.0145%" height="15" fill="rgb(242,38,24)" fg:x="8557" fg:w="2"/><text x="62.2707%" y="191.50"></text></g><g><title>&lt;matrixmultiply::util::RangeChunk as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="62.0932%" y="165" width="0.0145%" height="15" fill="rgb(225,182,9)" fg:x="8567" fg:w="2"/><text x="62.3432%" y="175.50"></text></g><g><title>&lt;matrixmultiply::dgemm_kernel::KernelSse2 as matrixmultiply::kernel::GemmKernel&gt;::kernel (4,182 samples, 30.31%)</title><rect x="62.1584%" y="149" width="30.3109%" height="15" fill="rgb(243,178,37)" fg:x="8576" fg:w="4182"/><text x="62.4084%" y="159.50">&lt;matrixmultiply::dgemm_kernel::KernelSse2 as matr..</text></g><g><title>matrixmultiply::dgemm_kernel::kernel_target_sse2 (4,182 samples, 30.31%)</title><rect x="62.1584%" y="133" width="30.3109%" height="15" fill="rgb(232,139,19)" fg:x="8576" fg:w="4182"/><text x="62.4084%" y="143.50">matrixmultiply::dgemm_kernel::kernel_target_sse2</text></g><g><title>matrixmultiply::dgemm_kernel::kernel_fallback_impl (4,182 samples, 30.31%)</title><rect x="62.1584%" y="117" width="30.3109%" height="15" fill="rgb(225,201,24)" fg:x="8576" fg:w="4182"/><text x="62.4084%" y="127.50">matrixmultiply::dgemm_kernel::kernel_fallback_impl</text></g><g><title>matrixmultiply::dgemm_kernel::at (225 samples, 1.63%)</title><rect x="90.8386%" y="101" width="1.6308%" height="15" fill="rgb(221,47,46)" fg:x="12533" fg:w="225"/><text x="91.0886%" y="111.50"></text></g><g><title>&lt;f64 as matrixmultiply::kernel::Element&gt;::add_assign (16 samples, 0.12%)</title><rect x="92.5636%" y="133" width="0.1160%" height="15" fill="rgb(249,23,13)" fg:x="12771" fg:w="16"/><text x="92.8136%" y="143.50"></text></g><g><title>&lt;f64 as matrixmultiply::kernel::Element&gt;::mul_assign (11 samples, 0.08%)</title><rect x="92.6796%" y="133" width="0.0797%" height="15" fill="rgb(219,9,5)" fg:x="12787" fg:w="11"/><text x="92.9296%" y="143.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (4 samples, 0.03%)</title><rect x="92.7593%" y="133" width="0.0290%" height="15" fill="rgb(254,171,16)" fg:x="12798" fg:w="4"/><text x="93.0093%" y="143.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (4 samples, 0.03%)</title><rect x="92.7593%" y="117" width="0.0290%" height="15" fill="rgb(230,171,20)" fg:x="12798" fg:w="4"/><text x="93.0093%" y="127.50"></text></g><g><title>matrixmultiply::gemm::gemm_packed (4,251 samples, 30.81%)</title><rect x="62.0207%" y="213" width="30.8110%" height="15" fill="rgb(210,71,41)" fg:x="8557" fg:w="4251"/><text x="62.2707%" y="223.50">matrixmultiply::gemm::gemm_packed</text></g><g><title>matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (4,251 samples, 30.81%)</title><rect x="62.0207%" y="197" width="30.8110%" height="15" fill="rgb(206,173,20)" fg:x="8557" fg:w="4251"/><text x="62.2707%" y="207.50">matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::..</text></g><g><title>matrixmultiply::gemm::gemm_packed::_{{closure}} (4,249 samples, 30.80%)</title><rect x="62.0352%" y="181" width="30.7965%" height="15" fill="rgb(233,88,34)" fg:x="8559" fg:w="4249"/><text x="62.2852%" y="191.50">matrixmultiply::gemm::gemm_packed::_{{closure}}</text></g><g><title>matrixmultiply::gemm::masked_kernel (4,239 samples, 30.72%)</title><rect x="62.1077%" y="165" width="30.7241%" height="15" fill="rgb(223,209,46)" fg:x="8569" fg:w="4239"/><text x="62.3577%" y="175.50">matrixmultiply::gemm::masked_kernel</text></g><g><title>matrixmultiply::gemm::c_to_masked_ab_beta_c (50 samples, 0.36%)</title><rect x="92.4694%" y="149" width="0.3624%" height="15" fill="rgb(250,43,18)" fg:x="12758" fg:w="50"/><text x="92.7194%" y="159.50"></text></g><g><title>rawpointer::PointerExt::stride_offset (6 samples, 0.04%)</title><rect x="92.7883%" y="133" width="0.0435%" height="15" fill="rgb(208,13,10)" fg:x="12802" fg:w="6"/><text x="93.0383%" y="143.50"></text></g><g><title>&lt;*mut T as rawpointer::PointerExt&gt;::offset (3 samples, 0.02%)</title><rect x="92.8100%" y="117" width="0.0217%" height="15" fill="rgb(212,200,36)" fg:x="12805" fg:w="3"/><text x="93.0600%" y="127.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (3 samples, 0.02%)</title><rect x="92.8100%" y="101" width="0.0217%" height="15" fill="rgb(225,90,30)" fg:x="12805" fg:w="3"/><text x="93.0600%" y="111.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (159 samples, 1.15%)</title><rect x="92.9043%" y="165" width="1.1524%" height="15" fill="rgb(236,182,39)" fg:x="12818" fg:w="159"/><text x="93.1543%" y="175.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (45 samples, 0.33%)</title><rect x="94.0567%" y="165" width="0.3262%" height="15" fill="rgb(212,144,35)" fg:x="12977" fg:w="45"/><text x="94.3067%" y="175.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (45 samples, 0.33%)</title><rect x="94.0567%" y="149" width="0.3262%" height="15" fill="rgb(228,63,44)" fg:x="12977" fg:w="45"/><text x="94.3067%" y="159.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (21 samples, 0.15%)</title><rect x="94.2306%" y="133" width="0.1522%" height="15" fill="rgb(228,109,6)" fg:x="13001" fg:w="21"/><text x="94.4806%" y="143.50"></text></g><g><title>matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (4,468 samples, 32.38%)</title><rect x="62.0062%" y="245" width="32.3839%" height="15" fill="rgb(238,117,24)" fg:x="8555" fg:w="4468"/><text x="62.2562%" y="255.50">matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::fo..</text></g><g><title>matrixmultiply::gemm::gemm_loop::_{{closure}} (4,466 samples, 32.37%)</title><rect x="62.0207%" y="229" width="32.3694%" height="15" fill="rgb(242,26,26)" fg:x="8557" fg:w="4466"/><text x="62.2707%" y="239.50">matrixmultiply::gemm::gemm_loop::_{{closure}}</text></g><g><title>matrixmultiply::kernel::GemmKernel::pack_mr (215 samples, 1.56%)</title><rect x="92.8318%" y="213" width="1.5583%" height="15" fill="rgb(221,92,48)" fg:x="12808" fg:w="215"/><text x="93.0818%" y="223.50"></text></g><g><title>matrixmultiply::packing::pack (215 samples, 1.56%)</title><rect x="92.8318%" y="197" width="1.5583%" height="15" fill="rgb(209,209,32)" fg:x="12808" fg:w="215"/><text x="93.0818%" y="207.50"></text></g><g><title>matrixmultiply::packing::pack_impl (215 samples, 1.56%)</title><rect x="92.8318%" y="181" width="1.5583%" height="15" fill="rgb(221,70,22)" fg:x="12808" fg:w="215"/><text x="93.0818%" y="191.50"></text></g><g><title>&lt;ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt; as simple_network::algebra::AlgebraExt&gt;::weighted_sum (4,783 samples, 34.67%)</title><rect x="59.7304%" y="389" width="34.6670%" height="15" fill="rgb(248,145,5)" fg:x="8241" fg:w="4783"/><text x="59.9804%" y="399.50">&lt;ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,n..</text></g><g><title>ndarray::linalg::impl_linalg::_&lt;impl ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt;::dot (4,760 samples, 34.50%)</title><rect x="59.8971%" y="373" width="34.5003%" height="15" fill="rgb(226,116,26)" fg:x="8264" fg:w="4760"/><text x="60.1471%" y="383.50">ndarray::linalg::impl_linalg::_&lt;impl ndarray::ArrayBase&lt;..</text></g><g><title>&lt;ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt; as ndarray::linalg::impl_linalg::Dot&lt;ndarray::ArrayBase&lt;S2,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt;&gt;::dot (4,760 samples, 34.50%)</title><rect x="59.8971%" y="357" width="34.5003%" height="15" fill="rgb(244,5,17)" fg:x="8264" fg:w="4760"/><text x="60.1471%" y="367.50">&lt;ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usiz..</text></g><g><title>ndarray::linalg::impl_linalg::mat_mul_impl (4,757 samples, 34.48%)</title><rect x="59.9188%" y="341" width="34.4785%" height="15" fill="rgb(252,159,33)" fg:x="8267" fg:w="4757"/><text x="60.1688%" y="351.50">ndarray::linalg::impl_linalg::mat_mul_impl</text></g><g><title>ndarray::linalg::impl_linalg::mat_mul_general (4,696 samples, 34.04%)</title><rect x="60.3609%" y="325" width="34.0364%" height="15" fill="rgb(206,71,0)" fg:x="8328" fg:w="4696"/><text x="60.6109%" y="335.50">ndarray::linalg::impl_linalg::mat_mul_general</text></g><g><title>matrixmultiply::gemm::dgemm (4,696 samples, 34.04%)</title><rect x="60.3609%" y="309" width="34.0364%" height="15" fill="rgb(233,118,54)" fg:x="8328" fg:w="4696"/><text x="60.6109%" y="319.50">matrixmultiply::gemm::dgemm</text></g><g><title>matrixmultiply::dgemm_kernel::detect (4,696 samples, 34.04%)</title><rect x="60.3609%" y="293" width="34.0364%" height="15" fill="rgb(234,83,48)" fg:x="8328" fg:w="4696"/><text x="60.6109%" y="303.50">matrixmultiply::dgemm_kernel::detect</text></g><g><title>&lt;matrixmultiply::gemm::GemmParameters&lt;T&gt; as matrixmultiply::kernel::GemmSelect&lt;T&gt;&gt;::select (4,696 samples, 34.04%)</title><rect x="60.3609%" y="277" width="34.0364%" height="15" fill="rgb(228,3,54)" fg:x="8328" fg:w="4696"/><text x="60.6109%" y="287.50">&lt;matrixmultiply::gemm::GemmParameters&lt;T&gt; as matrixmulti..</text></g><g><title>matrixmultiply::gemm::gemm_loop (4,695 samples, 34.03%)</title><rect x="60.3682%" y="261" width="34.0291%" height="15" fill="rgb(226,155,13)" fg:x="8329" fg:w="4695"/><text x="60.6182%" y="271.50">matrixmultiply::gemm::gemm_loop</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 0.01%)</title><rect x="94.4046%" y="277" width="0.0145%" height="15" fill="rgb(241,28,37)" fg:x="13025" fg:w="2"/><text x="94.6546%" y="287.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 0.01%)</title><rect x="94.4046%" y="261" width="0.0145%" height="15" fill="rgb(233,93,10)" fg:x="13025" fg:w="2"/><text x="94.6546%" y="271.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.01%)</title><rect x="94.4046%" y="245" width="0.0145%" height="15" fill="rgb(225,113,19)" fg:x="13025" fg:w="2"/><text x="94.6546%" y="255.50"></text></g><g><title>__GI___libc_realloc (2 samples, 0.01%)</title><rect x="94.4046%" y="229" width="0.0145%" height="15" fill="rgb(241,2,18)" fg:x="13025" fg:w="2"/><text x="94.6546%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.03%)</title><rect x="94.4046%" y="325" width="0.0290%" height="15" fill="rgb(228,207,21)" fg:x="13025" fg:w="4"/><text x="94.6546%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (4 samples, 0.03%)</title><rect x="94.4046%" y="309" width="0.0290%" height="15" fill="rgb(213,211,35)" fg:x="13025" fg:w="4"/><text x="94.6546%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.03%)</title><rect x="94.4046%" y="293" width="0.0290%" height="15" fill="rgb(209,83,10)" fg:x="13025" fg:w="4"/><text x="94.6546%" y="303.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.01%)</title><rect x="94.4191%" y="277" width="0.0145%" height="15" fill="rgb(209,164,1)" fg:x="13027" fg:w="2"/><text x="94.6691%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (6 samples, 0.04%)</title><rect x="94.3973%" y="341" width="0.0435%" height="15" fill="rgb(213,184,43)" fg:x="13024" fg:w="6"/><text x="94.6473%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (6 samples, 0.04%)</title><rect x="94.4408%" y="325" width="0.0435%" height="15" fill="rgb(231,61,34)" fg:x="13030" fg:w="6"/><text x="94.6908%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (6 samples, 0.04%)</title><rect x="94.4408%" y="309" width="0.0435%" height="15" fill="rgb(235,75,3)" fg:x="13030" fg:w="6"/><text x="94.6908%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (6 samples, 0.04%)</title><rect x="94.4408%" y="293" width="0.0435%" height="15" fill="rgb(220,106,47)" fg:x="13030" fg:w="6"/><text x="94.6908%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (6 samples, 0.04%)</title><rect x="94.4408%" y="277" width="0.0435%" height="15" fill="rgb(210,196,33)" fg:x="13030" fg:w="6"/><text x="94.6908%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (5 samples, 0.04%)</title><rect x="94.4481%" y="261" width="0.0362%" height="15" fill="rgb(229,154,42)" fg:x="13031" fg:w="5"/><text x="94.6981%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.04%)</title><rect x="94.4481%" y="245" width="0.0362%" height="15" fill="rgb(228,114,26)" fg:x="13031" fg:w="5"/><text x="94.6981%" y="255.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (5 samples, 0.04%)</title><rect x="94.4481%" y="229" width="0.0362%" height="15" fill="rgb(208,144,1)" fg:x="13031" fg:w="5"/><text x="94.6981%" y="239.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (14 samples, 0.10%)</title><rect x="94.3973%" y="389" width="0.1015%" height="15" fill="rgb(239,112,37)" fg:x="13024" fg:w="14"/><text x="94.6473%" y="399.50"></text></g><g><title>simple_network::network::Network::predict_::_{{closure}} (14 samples, 0.10%)</title><rect x="94.3973%" y="373" width="0.1015%" height="15" fill="rgb(210,96,50)" fg:x="13024" fg:w="14"/><text x="94.6473%" y="383.50"></text></g><g><title>simple_network::term_stack::TermStack::push (14 samples, 0.10%)</title><rect x="94.3973%" y="357" width="0.1015%" height="15" fill="rgb(222,178,2)" fg:x="13024" fg:w="14"/><text x="94.6473%" y="367.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::to_owned (8 samples, 0.06%)</title><rect x="94.4408%" y="341" width="0.0580%" height="15" fill="rgb(226,74,18)" fg:x="13030" fg:w="8"/><text x="94.6908%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.01%)</title><rect x="94.5061%" y="309" width="0.0145%" height="15" fill="rgb(225,67,54)" fg:x="13039" fg:w="2"/><text x="94.7561%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.01%)</title><rect x="94.5061%" y="293" width="0.0145%" height="15" fill="rgb(251,92,32)" fg:x="13039" fg:w="2"/><text x="94.7561%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.01%)</title><rect x="94.5061%" y="277" width="0.0145%" height="15" fill="rgb(228,149,22)" fg:x="13039" fg:w="2"/><text x="94.7561%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.01%)</title><rect x="94.5061%" y="261" width="0.0145%" height="15" fill="rgb(243,54,13)" fg:x="13039" fg:w="2"/><text x="94.7561%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.01%)</title><rect x="94.5061%" y="245" width="0.0145%" height="15" fill="rgb(243,180,28)" fg:x="13039" fg:w="2"/><text x="94.7561%" y="255.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.01%)</title><rect x="94.5061%" y="229" width="0.0145%" height="15" fill="rgb(208,167,24)" fg:x="13039" fg:w="2"/><text x="94.7561%" y="239.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.01%)</title><rect x="94.5061%" y="213" width="0.0145%" height="15" fill="rgb(245,73,45)" fg:x="13039" fg:w="2"/><text x="94.7561%" y="223.50"></text></g><g><title>_int_malloc (2 samples, 0.01%)</title><rect x="94.5061%" y="197" width="0.0145%" height="15" fill="rgb(237,203,48)" fg:x="13039" fg:w="2"/><text x="94.7561%" y="207.50"></text></g><g><title>simple_network::network::Network::predict_ (5,197 samples, 37.67%)</title><rect x="58.0633%" y="405" width="37.6676%" height="15" fill="rgb(211,197,16)" fg:x="8011" fg:w="5197"/><text x="58.3133%" y="415.50">simple_network::network::Network::predict_</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::to_owned (169 samples, 1.22%)</title><rect x="94.5061%" y="389" width="1.2249%" height="15" fill="rgb(243,99,51)" fg:x="13039" fg:w="169"/><text x="94.7561%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (169 samples, 1.22%)</title><rect x="94.5061%" y="373" width="1.2249%" height="15" fill="rgb(215,123,29)" fg:x="13039" fg:w="169"/><text x="94.7561%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (169 samples, 1.22%)</title><rect x="94.5061%" y="357" width="1.2249%" height="15" fill="rgb(239,186,37)" fg:x="13039" fg:w="169"/><text x="94.7561%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (169 samples, 1.22%)</title><rect x="94.5061%" y="341" width="1.2249%" height="15" fill="rgb(252,136,39)" fg:x="13039" fg:w="169"/><text x="94.7561%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (169 samples, 1.22%)</title><rect x="94.5061%" y="325" width="1.2249%" height="15" fill="rgb(223,213,32)" fg:x="13039" fg:w="169"/><text x="94.7561%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (167 samples, 1.21%)</title><rect x="94.5205%" y="309" width="1.2104%" height="15" fill="rgb(233,115,5)" fg:x="13041" fg:w="167"/><text x="94.7705%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (167 samples, 1.21%)</title><rect x="94.5205%" y="293" width="1.2104%" height="15" fill="rgb(207,226,44)" fg:x="13041" fg:w="167"/><text x="94.7705%" y="303.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (167 samples, 1.21%)</title><rect x="94.5205%" y="277" width="1.2104%" height="15" fill="rgb(208,126,0)" fg:x="13041" fg:w="167"/><text x="94.7705%" y="287.50"></text></g><g><title>alloc::alloc::exchange_malloc (3 samples, 0.02%)</title><rect x="95.7310%" y="389" width="0.0217%" height="15" fill="rgb(244,66,21)" fg:x="13208" fg:w="3"/><text x="95.9810%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.02%)</title><rect x="95.7310%" y="373" width="0.0217%" height="15" fill="rgb(222,97,12)" fg:x="13208" fg:w="3"/><text x="95.9810%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.02%)</title><rect x="95.7310%" y="357" width="0.0217%" height="15" fill="rgb(219,213,19)" fg:x="13208" fg:w="3"/><text x="95.9810%" y="367.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.02%)</title><rect x="95.7310%" y="341" width="0.0217%" height="15" fill="rgb(252,169,30)" fg:x="13208" fg:w="3"/><text x="95.9810%" y="351.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.02%)</title><rect x="95.7310%" y="325" width="0.0217%" height="15" fill="rgb(206,32,51)" fg:x="13208" fg:w="3"/><text x="95.9810%" y="335.50"></text></g><g><title>tcache_get (3 samples, 0.02%)</title><rect x="95.7310%" y="309" width="0.0217%" height="15" fill="rgb(250,172,42)" fg:x="13208" fg:w="3"/><text x="95.9810%" y="319.50"></text></g><g><title>tcache_get_n (3 samples, 0.02%)</title><rect x="95.7310%" y="293" width="0.0217%" height="15" fill="rgb(209,34,43)" fg:x="13208" fg:w="3"/><text x="95.9810%" y="303.50"></text></g><g><title>simple_network::network::Network::forward_pass (5,393 samples, 39.09%)</title><rect x="56.6717%" y="421" width="39.0882%" height="15" fill="rgb(223,11,35)" fg:x="7819" fg:w="5393"/><text x="56.9217%" y="431.50">simple_network::network::Network::forward_pass</text></g><g><title>simple_network::term_stack::TermStack::reset (4 samples, 0.03%)</title><rect x="95.7310%" y="405" width="0.0290%" height="15" fill="rgb(251,219,26)" fg:x="13208" fg:w="4"/><text x="95.9810%" y="415.50"></text></g><g><title>__GI___libc_free (5 samples, 0.04%)</title><rect x="95.7672%" y="277" width="0.0362%" height="15" fill="rgb(231,119,3)" fg:x="13213" fg:w="5"/><text x="96.0172%" y="287.50"></text></g><g><title>_int_free_merge_chunk (3 samples, 0.02%)</title><rect x="95.7817%" y="261" width="0.0217%" height="15" fill="rgb(216,97,11)" fg:x="13215" fg:w="3"/><text x="96.0317%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt; (6 samples, 0.04%)</title><rect x="95.7672%" y="405" width="0.0435%" height="15" fill="rgb(223,59,9)" fg:x="13213" fg:w="6"/><text x="96.0172%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;&gt; (6 samples, 0.04%)</title><rect x="95.7672%" y="389" width="0.0435%" height="15" fill="rgb(233,93,31)" fg:x="13213" fg:w="6"/><text x="96.0172%" y="399.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.04%)</title><rect x="95.7672%" y="373" width="0.0435%" height="15" fill="rgb(239,81,33)" fg:x="13213" fg:w="6"/><text x="96.0172%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f64&gt;&gt; (6 samples, 0.04%)</title><rect x="95.7672%" y="357" width="0.0435%" height="15" fill="rgb(213,120,34)" fg:x="13213" fg:w="6"/><text x="96.0172%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f64&gt;&gt; (6 samples, 0.04%)</title><rect x="95.7672%" y="341" width="0.0435%" height="15" fill="rgb(243,49,53)" fg:x="13213" fg:w="6"/><text x="96.0172%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.04%)</title><rect x="95.7672%" y="325" width="0.0435%" height="15" fill="rgb(247,216,33)" fg:x="13213" fg:w="6"/><text x="96.0172%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 0.04%)</title><rect x="95.7672%" y="309" width="0.0435%" height="15" fill="rgb(226,26,14)" fg:x="13213" fg:w="6"/><text x="96.0172%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.04%)</title><rect x="95.7672%" y="293" width="0.0435%" height="15" fill="rgb(215,49,53)" fg:x="13213" fg:w="6"/><text x="96.0172%" y="303.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.03%)</title><rect x="95.8107%" y="373" width="0.0290%" height="15" fill="rgb(245,162,40)" fg:x="13219" fg:w="4"/><text x="96.0607%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;[ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;]&gt; (3 samples, 0.02%)</title><rect x="95.8179%" y="357" width="0.0217%" height="15" fill="rgb(229,68,17)" fg:x="13220" fg:w="3"/><text x="96.0679%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt; (3 samples, 0.02%)</title><rect x="95.8179%" y="341" width="0.0217%" height="15" fill="rgb(213,182,10)" fg:x="13220" fg:w="3"/><text x="96.0679%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;&gt; (3 samples, 0.02%)</title><rect x="95.8179%" y="325" width="0.0217%" height="15" fill="rgb(245,125,30)" fg:x="13220" fg:w="3"/><text x="96.0679%" y="335.50"></text></g><g><title>&lt;ndarray::data_repr::OwnedRepr&lt;A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="95.8179%" y="309" width="0.0217%" height="15" fill="rgb(232,202,2)" fg:x="13220" fg:w="3"/><text x="96.0679%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f64&gt;&gt; (3 samples, 0.02%)</title><rect x="95.8179%" y="293" width="0.0217%" height="15" fill="rgb(237,140,51)" fg:x="13220" fg:w="3"/><text x="96.0679%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f64&gt;&gt; (3 samples, 0.02%)</title><rect x="95.8179%" y="277" width="0.0217%" height="15" fill="rgb(236,157,25)" fg:x="13220" fg:w="3"/><text x="96.0679%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="95.8179%" y="261" width="0.0217%" height="15" fill="rgb(219,209,0)" fg:x="13220" fg:w="3"/><text x="96.0679%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.02%)</title><rect x="95.8179%" y="245" width="0.0217%" height="15" fill="rgb(240,116,54)" fg:x="13220" fg:w="3"/><text x="96.0679%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.02%)</title><rect x="95.8179%" y="229" width="0.0217%" height="15" fill="rgb(216,10,36)" fg:x="13220" fg:w="3"/><text x="96.0679%" y="239.50"></text></g><g><title>__GI___libc_free (3 samples, 0.02%)</title><rect x="95.8179%" y="213" width="0.0217%" height="15" fill="rgb(222,72,44)" fg:x="13220" fg:w="3"/><text x="96.0679%" y="223.50"></text></g><g><title>_int_free_maybe_consolidate (2 samples, 0.01%)</title><rect x="95.8252%" y="197" width="0.0145%" height="15" fill="rgb(232,159,9)" fg:x="13221" fg:w="2"/><text x="96.0752%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;simple_network::chain_rule::ChainRuleComputation&gt; (5 samples, 0.04%)</title><rect x="95.8107%" y="405" width="0.0362%" height="15" fill="rgb(210,39,32)" fg:x="13219" fg:w="5"/><text x="96.0607%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::vec_deque::VecDeque&lt;ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f64&gt;,ndarray::dimension::dim::Dim&lt;[usize: 2]&gt;&gt;&gt;&gt; (5 samples, 0.04%)</title><rect x="95.8107%" y="389" width="0.0362%" height="15" fill="rgb(216,194,45)" fg:x="13219" fg:w="5"/><text x="96.0607%" y="399.50"></text></g><g><title>core::ptr::write (55 samples, 0.40%)</title><rect x="96.3470%" y="309" width="0.3986%" height="15" fill="rgb(218,18,35)" fg:x="13293" fg:w="55"/><text x="96.5970%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (142 samples, 1.03%)</title><rect x="95.9919%" y="341" width="1.0292%" height="15" fill="rgb(207,83,51)" fg:x="13244" fg:w="142"/><text x="96.2419%" y="351.50"></text></g><g><title>ndarray::iterators::to_vec_mapped::_{{closure}} (93 samples, 0.67%)</title><rect x="96.3470%" y="325" width="0.6741%" height="15" fill="rgb(225,63,43)" fg:x="13293" fg:w="93"/><text x="96.5970%" y="335.50"></text></g><g><title>ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv::_{{closure}} (38 samples, 0.28%)</title><rect x="96.7457%" y="309" width="0.2754%" height="15" fill="rgb(207,57,36)" fg:x="13348" fg:w="38"/><text x="96.9957%" y="319.50"></text></g><g><title>simple_network::network::Network::update_iteration::_{{closure}} (38 samples, 0.28%)</title><rect x="96.7457%" y="293" width="0.2754%" height="15" fill="rgb(216,99,33)" fg:x="13348" fg:w="38"/><text x="96.9957%" y="303.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_shape_trusted_iter_unchecked (165 samples, 1.20%)</title><rect x="95.8542%" y="373" width="1.1959%" height="15" fill="rgb(225,42,16)" fg:x="13225" fg:w="165"/><text x="96.1042%" y="383.50"></text></g><g><title>ndarray::iterators::to_vec_mapped (164 samples, 1.19%)</title><rect x="95.8614%" y="357" width="1.1887%" height="15" fill="rgb(220,201,45)" fg:x="13226" fg:w="164"/><text x="96.1114%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (4 samples, 0.03%)</title><rect x="97.0211%" y="341" width="0.0290%" height="15" fill="rgb(225,33,4)" fg:x="13386" fg:w="4"/><text x="97.2711%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.03%)</title><rect x="97.0211%" y="325" width="0.0290%" height="15" fill="rgb(224,33,50)" fg:x="13386" fg:w="4"/><text x="97.2711%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.03%)</title><rect x="97.0211%" y="309" width="0.0290%" height="15" fill="rgb(246,198,51)" fg:x="13386" fg:w="4"/><text x="97.2711%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.03%)</title><rect x="97.0211%" y="293" width="0.0290%" height="15" fill="rgb(205,22,4)" fg:x="13386" fg:w="4"/><text x="97.2711%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.03%)</title><rect x="97.0211%" y="277" width="0.0290%" height="15" fill="rgb(206,3,8)" fg:x="13386" fg:w="4"/><text x="97.2711%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.03%)</title><rect x="97.0211%" y="261" width="0.0290%" height="15" fill="rgb(251,23,15)" fg:x="13386" fg:w="4"/><text x="97.2711%" y="271.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.03%)</title><rect x="97.0211%" y="245" width="0.0290%" height="15" fill="rgb(252,88,28)" fg:x="13386" fg:w="4"/><text x="97.2711%" y="255.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.03%)</title><rect x="97.0211%" y="229" width="0.0290%" height="15" fill="rgb(212,127,14)" fg:x="13386" fg:w="4"/><text x="97.2711%" y="239.50"></text></g><g><title>_int_malloc (4 samples, 0.03%)</title><rect x="97.0211%" y="213" width="0.0290%" height="15" fill="rgb(247,145,37)" fg:x="13386" fg:w="4"/><text x="97.2711%" y="223.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv (168 samples, 1.22%)</title><rect x="95.8469%" y="405" width="1.2177%" height="15" fill="rgb(209,117,53)" fg:x="13224" fg:w="168"/><text x="96.0969%" y="415.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (168 samples, 1.22%)</title><rect x="95.8469%" y="389" width="1.2177%" height="15" fill="rgb(212,90,42)" fg:x="13224" fg:w="168"/><text x="96.0969%" y="399.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::as_slice_memory_order (2 samples, 0.01%)</title><rect x="97.0501%" y="373" width="0.0145%" height="15" fill="rgb(218,164,37)" fg:x="13390" fg:w="2"/><text x="97.3001%" y="383.50"></text></g><g><title>core::ptr::write (43 samples, 0.31%)</title><rect x="97.6734%" y="309" width="0.3117%" height="15" fill="rgb(246,65,34)" fg:x="13476" fg:w="43"/><text x="97.9234%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (158 samples, 1.15%)</title><rect x="97.2023%" y="341" width="1.1452%" height="15" fill="rgb(231,100,33)" fg:x="13411" fg:w="158"/><text x="97.4523%" y="351.50"></text></g><g><title>ndarray::iterators::to_vec_mapped::_{{closure}} (93 samples, 0.67%)</title><rect x="97.6734%" y="325" width="0.6741%" height="15" fill="rgb(228,126,14)" fg:x="13476" fg:w="93"/><text x="97.9234%" y="335.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::_&lt;impl core::ops::arith::Mul&lt;B&gt; for &amp;ndarray::ArrayBase&lt;S,D&gt;&gt;::mul::_{{closure}} (50 samples, 0.36%)</title><rect x="97.9851%" y="309" width="0.3624%" height="15" fill="rgb(215,173,21)" fg:x="13519" fg:w="50"/><text x="98.2351%" y="319.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (50 samples, 0.36%)</title><rect x="97.9851%" y="293" width="0.3624%" height="15" fill="rgb(210,6,40)" fg:x="13519" fg:w="50"/><text x="98.2351%" y="303.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_shape_trusted_iter_unchecked (179 samples, 1.30%)</title><rect x="97.0646%" y="373" width="1.2974%" height="15" fill="rgb(212,48,18)" fg:x="13392" fg:w="179"/><text x="97.3146%" y="383.50"></text></g><g><title>ndarray::iterators::to_vec_mapped (179 samples, 1.30%)</title><rect x="97.0646%" y="357" width="1.2974%" height="15" fill="rgb(230,214,11)" fg:x="13392" fg:w="179"/><text x="97.3146%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.01%)</title><rect x="98.3475%" y="341" width="0.0145%" height="15" fill="rgb(254,105,39)" fg:x="13569" fg:w="2"/><text x="98.5975%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.01%)</title><rect x="98.3475%" y="325" width="0.0145%" height="15" fill="rgb(245,158,5)" fg:x="13569" fg:w="2"/><text x="98.5975%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.01%)</title><rect x="98.3475%" y="309" width="0.0145%" height="15" fill="rgb(249,208,11)" fg:x="13569" fg:w="2"/><text x="98.5975%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.01%)</title><rect x="98.3475%" y="293" width="0.0145%" height="15" fill="rgb(210,39,28)" fg:x="13569" fg:w="2"/><text x="98.5975%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.01%)</title><rect x="98.3475%" y="277" width="0.0145%" height="15" fill="rgb(211,56,53)" fg:x="13569" fg:w="2"/><text x="98.5975%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.01%)</title><rect x="98.3475%" y="261" width="0.0145%" height="15" fill="rgb(226,201,30)" fg:x="13569" fg:w="2"/><text x="98.5975%" y="271.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.01%)</title><rect x="98.3475%" y="245" width="0.0145%" height="15" fill="rgb(239,101,34)" fg:x="13569" fg:w="2"/><text x="98.5975%" y="255.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.01%)</title><rect x="98.3475%" y="229" width="0.0145%" height="15" fill="rgb(226,209,5)" fg:x="13569" fg:w="2"/><text x="98.5975%" y="239.50"></text></g><g><title>_int_malloc (2 samples, 0.01%)</title><rect x="98.3475%" y="213" width="0.0145%" height="15" fill="rgb(250,105,47)" fg:x="13569" fg:w="2"/><text x="98.5975%" y="223.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Mul&lt;B&gt; for &amp;ndarray::ArrayBase&lt;S,D&gt;&gt;::mul (180 samples, 1.30%)</title><rect x="97.0646%" y="405" width="1.3046%" height="15" fill="rgb(230,72,3)" fg:x="13392" fg:w="180"/><text x="97.3146%" y="415.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (180 samples, 1.30%)</title><rect x="97.0646%" y="389" width="1.3046%" height="15" fill="rgb(232,218,39)" fg:x="13392" fg:w="180"/><text x="97.3146%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.19%)</title><rect x="99.0795%" y="373" width="0.1884%" height="15" fill="rgb(248,166,6)" fg:x="13670" fg:w="26"/><text x="99.3295%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (26 samples, 0.19%)</title><rect x="99.0795%" y="357" width="0.1884%" height="15" fill="rgb(247,89,20)" fg:x="13670" fg:w="26"/><text x="99.3295%" y="367.50"></text></g><g><title>simple_network::network::Network::train_iteration (10,879 samples, 78.85%)</title><rect x="21.0988%" y="437" width="78.8505%" height="15" fill="rgb(248,130,54)" fg:x="2911" fg:w="10879"/><text x="21.3488%" y="447.50">simple_network::network::Network::train_iteration</text></g><g><title>simple_network::network::Network::update_iteration (578 samples, 4.19%)</title><rect x="95.7599%" y="421" width="4.1893%" height="15" fill="rgb(234,196,4)" fg:x="13212" fg:w="578"/><text x="96.0099%" y="431.50">simpl..</text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Sub&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::sub (218 samples, 1.58%)</title><rect x="98.3692%" y="405" width="1.5801%" height="15" fill="rgb(250,143,31)" fg:x="13572" fg:w="218"/><text x="98.6192%" y="415.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_same_shape (217 samples, 1.57%)</title><rect x="98.3765%" y="389" width="1.5728%" height="15" fill="rgb(211,110,34)" fg:x="13573" fg:w="217"/><text x="98.6265%" y="399.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::clone_iopf::_{{closure}} (93 samples, 0.67%)</title><rect x="99.2752%" y="373" width="0.6741%" height="15" fill="rgb(215,124,48)" fg:x="13697" fg:w="93"/><text x="99.5252%" y="383.50"></text></g><g><title>core::ops::function::Fn::call (35 samples, 0.25%)</title><rect x="99.6956%" y="357" width="0.2537%" height="15" fill="rgb(216,46,13)" fg:x="13755" fg:w="35"/><text x="99.9456%" y="367.50"></text></g><g><title>&lt;f64 as core::ops::arith::Sub&gt;::sub (35 samples, 0.25%)</title><rect x="99.6956%" y="341" width="0.2537%" height="15" fill="rgb(205,184,25)" fg:x="13755" fg:w="35"/><text x="99.9456%" y="351.50"></text></g><g><title>__libc_start_main_impl (13,566 samples, 98.33%)</title><rect x="1.6308%" y="725" width="98.3257%" height="15" fill="rgb(228,1,10)" fg:x="225" fg:w="13566"/><text x="1.8808%" y="735.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (13,566 samples, 98.33%)</title><rect x="1.6308%" y="709" width="98.3257%" height="15" fill="rgb(213,116,27)" fg:x="225" fg:w="13566"/><text x="1.8808%" y="719.50">__libc_start_call_main</text></g><g><title>main (13,566 samples, 98.33%)</title><rect x="1.6308%" y="693" width="98.3257%" height="15" fill="rgb(241,95,50)" fg:x="225" fg:w="13566"/><text x="1.8808%" y="703.50">main</text></g><g><title>std::rt::lang_start_internal (13,566 samples, 98.33%)</title><rect x="1.6308%" y="677" width="98.3257%" height="15" fill="rgb(238,48,32)" fg:x="225" fg:w="13566"/><text x="1.8808%" y="687.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (13,565 samples, 98.32%)</title><rect x="1.6380%" y="661" width="98.3185%" height="15" fill="rgb(235,113,49)" fg:x="226" fg:w="13565"/><text x="1.8880%" y="671.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (13,565 samples, 98.32%)</title><rect x="1.6380%" y="645" width="98.3185%" height="15" fill="rgb(205,127,43)" fg:x="226" fg:w="13565"/><text x="1.8880%" y="655.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (13,565 samples, 98.32%)</title><rect x="1.6380%" y="629" width="98.3185%" height="15" fill="rgb(250,162,2)" fg:x="226" fg:w="13565"/><text x="1.8880%" y="639.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (13,565 samples, 98.32%)</title><rect x="1.6380%" y="613" width="98.3185%" height="15" fill="rgb(220,13,41)" fg:x="226" fg:w="13565"/><text x="1.8880%" y="623.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (13,565 samples, 98.32%)</title><rect x="1.6380%" y="597" width="98.3185%" height="15" fill="rgb(249,221,25)" fg:x="226" fg:w="13565"/><text x="1.8880%" y="607.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (13,565 samples, 98.32%)</title><rect x="1.6380%" y="581" width="98.3185%" height="15" fill="rgb(215,208,19)" fg:x="226" fg:w="13565"/><text x="1.8880%" y="591.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (13,565 samples, 98.32%)</title><rect x="1.6380%" y="565" width="98.3185%" height="15" fill="rgb(236,175,2)" fg:x="226" fg:w="13565"/><text x="1.8880%" y="575.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (13,565 samples, 98.32%)</title><rect x="1.6380%" y="549" width="98.3185%" height="15" fill="rgb(241,52,2)" fg:x="226" fg:w="13565"/><text x="1.8880%" y="559.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (13,565 samples, 98.32%)</title><rect x="1.6380%" y="533" width="98.3185%" height="15" fill="rgb(248,140,14)" fg:x="226" fg:w="13565"/><text x="1.8880%" y="543.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (13,565 samples, 98.32%)</title><rect x="1.6380%" y="517" width="98.3185%" height="15" fill="rgb(253,22,42)" fg:x="226" fg:w="13565"/><text x="1.8880%" y="527.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (13,565 samples, 98.32%)</title><rect x="1.6380%" y="501" width="98.3185%" height="15" fill="rgb(234,61,47)" fg:x="226" fg:w="13565"/><text x="1.8880%" y="511.50">core::ops::function::FnOnce::call_once</text></g><g><title>simple_network::main (13,565 samples, 98.32%)</title><rect x="1.6380%" y="485" width="98.3185%" height="15" fill="rgb(208,226,15)" fg:x="226" fg:w="13565"/><text x="1.8880%" y="495.50">simple_network::main</text></g><g><title>simple_network::network::Network::fit (12,617 samples, 91.45%)</title><rect x="8.5091%" y="469" width="91.4474%" height="15" fill="rgb(217,221,4)" fg:x="1174" fg:w="12617"/><text x="8.7591%" y="479.50">simple_network::network::Network::fit</text></g><g><title>simple_network::network::Network::train_minibatch (12,617 samples, 91.45%)</title><rect x="8.5091%" y="453" width="91.4474%" height="15" fill="rgb(212,174,34)" fg:x="1174" fg:w="12617"/><text x="8.7591%" y="463.50">simple_network::network::Network::train_minibatch</text></g><g><title>_start (13,575 samples, 98.39%)</title><rect x="1.5873%" y="741" width="98.3910%" height="15" fill="rgb(253,83,4)" fg:x="219" fg:w="13575"/><text x="1.8373%" y="751.50">_start</text></g><g><title>_dl_start (3 samples, 0.02%)</title><rect x="99.9565%" y="725" width="0.0217%" height="15" fill="rgb(250,195,49)" fg:x="13791" fg:w="3"/><text x="100.2065%" y="735.50"></text></g><g><title>_dl_start_final (3 samples, 0.02%)</title><rect x="99.9565%" y="709" width="0.0217%" height="15" fill="rgb(241,192,25)" fg:x="13791" fg:w="3"/><text x="100.2065%" y="719.50"></text></g><g><title>_dl_sysdep_start (3 samples, 0.02%)</title><rect x="99.9565%" y="693" width="0.0217%" height="15" fill="rgb(208,124,10)" fg:x="13791" fg:w="3"/><text x="100.2065%" y="703.50"></text></g><g><title>dl_main (2 samples, 0.01%)</title><rect x="99.9638%" y="677" width="0.0145%" height="15" fill="rgb(222,33,0)" fg:x="13792" fg:w="2"/><text x="100.2138%" y="687.50"></text></g><g><title>all (13,797 samples, 100%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(234,209,28)" fg:x="0" fg:w="13797"/><text x="0.2500%" y="783.50"></text></g><g><title>simple_network (13,797 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(224,11,23)" fg:x="0" fg:w="13797"/><text x="0.2500%" y="767.50">simple_network</text></g></svg></svg>